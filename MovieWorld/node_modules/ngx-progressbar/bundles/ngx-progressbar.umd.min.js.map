{"version":3,"file":"ngx-progressbar.umd.min.js","sources":["../../src/services/progress.service.ts","../../src/services/browser-xhr.provider.ts","../../src/services/interceptor.provider.ts","../../src/components/progress-bar.component.ts","../../src/components/progress.component.ts","../../src/modules/progress.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { NgProgressState } from '../models/progress.state';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport'rxjs/add/observable/timer';\r\nimport'rxjs/add/operator/switchMap';\r\nimport'rxjs/add/operator/do';\r\nimport'rxjs/add/operator/takeWhile';\n/**\n * Helper\n */\nconst clamp = (n, min, max) => {\r\n  if (n < min) {\r\n    return min;\r\n  }\r\n  if (n > max) {\r\n    return max;\r\n  }\r\n  return n;\r\n};\nexport class NgProgress {\n/**\n * Initial state\n */\ninitState: NgProgressState = {\r\n    active: false,\r\n    value: 0\r\n  };\n/**\n * Progress state\n */\nstate = new BehaviorSubject(this.initState);\n/**\n * Trickling stream\n */\ntrickling = new Subject();\r\n\r\n  progress = 0;\r\n  maximum = 1;\r\n  minimum = 0.08;\r\n  speed = 200;\r\n  trickleSpeed = 300;\nconstructor() {\r\n\r\n    this.trickling.switchMap(() => {\r\n      return Observable\r\n        .timer(0, this.trickleSpeed)\r\n        .takeWhile(() => this.isStarted())\r\n        .do(() => this.inc());\r\n    }).subscribe();\r\n  }\n/**\n * Start\n * @return {?}\n */\nstart() {\r\n    if (!this.isStarted()) {\r\n      this.set(this.minimum);\r\n    }\r\n    this.trickling.next();\r\n  }\n/**\n * Done\n * @return {?}\n */\ndone() {\r\n    /** if started, complete the progress */\r\n    if (this.isStarted()) {\r\n      this.set(.3 + .5 * Math.random());\r\n      this.set(this.maximum);\r\n    }\r\n  }\n/**\n * Increment the progress\n * @param {?=} amount\n * @return {?}\n */\ninc(amount?) {\r\n    let /** @type {?} */ n = this.progress;\r\n    /** if it hasn't start, start */\r\n    if (!this.isStarted()) {\r\n      this.start();\r\n    } else {\r\n      if (typeof amount !== 'number') {\r\n        if (n >= 0 && n < 0.2) {\r\n          amount = 0.1;\r\n        } else if (n >= 0.2 && n < 0.5) {\r\n          amount = 0.04;\r\n        } else if (n >= 0.5 && n < 0.8) {\r\n          amount = 0.02;\r\n        } else if (n >= 0.8 && n < 0.99) {\r\n          amount = 0.005;\r\n        } else {\r\n          amount = 0;\r\n        }\r\n      }\r\n      n = clamp(n + amount, 0, 0.994);\r\n      this.set(n);\r\n    }\r\n  }\n/**\n * Set the progress\n * @param {?} n\n * @return {?}\n */\nset(n) {\r\n    this.progress = clamp(n, this.minimum, this.maximum);\r\n    this.updateState(this.progress, true);\r\n    /** if progress completed */\r\n    if (n === this.maximum) {\r\n      const /** @type {?} */ hide = () => {\r\n        /**\r\n         *  reset the progress\r\n         *  Keep it { 0, false } to fadeOut progress-bar after complete\r\n         */\r\n        if (this.progress >= this.maximum) {\r\n          this.progress = 0;\r\n          this.updateState(this.progress, false);\r\n        }\r\n      };\r\n      const /** @type {?} */ complete = () => {\r\n        /**\r\n         * complete the progress\r\n         * { 1, false } to complete progress-bar before hiding\r\n         */\r\n        if (this.progress >= this.maximum) {\r\n          this.updateState(this.progress, false);\r\n          setTimeout(hide, this.speed);\r\n        }\r\n      };\r\n      setTimeout(complete, this.speed);\r\n    }\r\n  }\n/**\n * Is progress started\r\\@return {boolean}\n * @return {?}\n */\nisStarted(): boolean {\r\n    return this.progress > 0 && this.progress < this.maximum;\r\n  }\n/**\n * Update the progress\n * @param {?} progress\n * @param {?} isActive\n * @return {?}\n */\nprivate updateState(progress, isActive) {\r\n    this.state.next({\r\n      active: isActive,\r\n      value: progress\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgProgress_tsickle_Closure_declarations() {\n/** @type {?} */\nNgProgress.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgProgress.ctorParameters;\n/**\n * Initial state\n * @type {?}\n */\nNgProgress.prototype.initState;\n/**\n * Progress state\n * @type {?}\n */\nNgProgress.prototype.state;\n/**\n * Trickling stream\n * @type {?}\n */\nNgProgress.prototype.trickling;\n/** @type {?} */\nNgProgress.prototype.progress;\n/** @type {?} */\nNgProgress.prototype.maximum;\n/** @type {?} */\nNgProgress.prototype.minimum;\n/** @type {?} */\nNgProgress.prototype.speed;\n/** @type {?} */\nNgProgress.prototype.trickleSpeed;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { BrowserXhr } from '@angular/http';\r\n\r\nimport { NgProgress } from './progress.service';\nexport class NgProgressBrowserXhr extends BrowserXhr {\nprivate currentRequest: number = 0;\n/**\n * @param {?} ngProgress\n */\nconstructor(private ngProgress: NgProgress) {\r\n    super();\r\n  }\n/**\n * @return {?}\n */\npublic build() {\r\n    const /** @type {?} */ xhr = super.build();\r\n\r\n    xhr.onload = (evt) => this.done();\r\n    xhr.onerror = (evt) => this.done();\r\n    xhr.onabort = (evt) => this.done();\r\n\r\n    xhr.onloadstart = (event) => {\r\n      this.currentRequest++;\r\n      if (!this.ngProgress.isStarted()) {\r\n        this.ngProgress.start();\r\n      }\r\n    };\r\n\r\n    return xhr;\r\n  }\n/**\n * @return {?}\n */\nprivate done() {\r\n    this.currentRequest--;\r\n    if (this.currentRequest === 0) {\r\n      this.ngProgress.done();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgProgress, },\n];\n}\n\nfunction NgProgressBrowserXhr_tsickle_Closure_declarations() {\n/** @type {?} */\nNgProgressBrowserXhr.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgProgressBrowserXhr.ctorParameters;\n/** @type {?} */\nNgProgressBrowserXhr.prototype.currentRequest;\n/** @type {?} */\nNgProgressBrowserXhr.prototype.ngProgress;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { NgProgress } from './progress.service';\r\nimport'rxjs/add/operator/finally';\nexport class NgProgressInterceptor implements HttpInterceptor {\n/**\n * @param {?} ngProgress\n */\nconstructor(public ngProgress: NgProgress) {\r\n  }\n/**\n * @param {?} req\n * @param {?} next\n * @return {?}\n */\nintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    this.ngProgress.start();\r\n    return next.handle(req).finally(() => {\r\n      this.ngProgress.done();\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgProgress, },\n];\n}\n\nfunction NgProgressInterceptor_tsickle_Closure_declarations() {\n/** @type {?} */\nNgProgressInterceptor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgProgressInterceptor.ctorParameters;\n/** @type {?} */\nNgProgressInterceptor.prototype.ngProgress;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\nimport { NgProgressState } from '../models/progress.state';\nexport class ProgressBarComponent {\r\n\r\n   state: NgProgressState;\r\n   positionUsing: string;\r\n   ease: string;\r\n   speed: number;\r\n   showSpinner: boolean;\r\n   direction: string;\r\n   thick: string;\r\n   color: string;\n/**\n * Styles for progressbar\n * @return {?}\n */\nbarStyles() {\r\n    let /** @type {?} */ styles = {\r\n      transition: `all ${this.speed}ms ${this.ease}`,\r\n      backgroundColor: this.color\r\n    };\n/**\n * Get positioning value\n */\nconst n = (!this.state.value) ? {\r\n      leftToRightIncreased: -100,\r\n      leftToRightReduced: 0,\r\n      rightToLeftIncreased: 100,\r\n      rightToLeftReduced: 0\r\n    }[this.direction] : this.toPercentage(this.state.value);\r\n\r\n    switch (this.positionUsing) {\r\n      case 'translate3d':\r\n        styles = Object.assign({}, styles, {\r\n          transform: `translate3d(${n}%,0,0)`,\r\n          '-webkit-transform': `translate3d(${n}%,0,0)`,\r\n          '-moz-transform': `translate3d(${n}%,0,0)`,\r\n          '-o-transform': `translate3d(${n}%,0,0)`,\r\n          '-ms-transform': `translate3d(${n}%,0,0)`\r\n        });\r\n        break;\r\n      case 'translate':\r\n        styles = Object.assign({}, styles, {\r\n          transform: `translate(${n}%,0)`,\r\n          '-webkit-transform': `translate(${n}%,0)`,\r\n          '-moz-transform': `translate(${n}%,0)`,\r\n          '-o-transform': `translate(${n}%,0)`,\r\n          '-ms-transform': `translate(${n}%,0)`\r\n        });\r\n        break;\r\n      default:\r\n        styles = Object.assign({}, styles, {\r\n          marginLeft: `${n}%`\r\n        });\r\n    }\r\n    return styles;\r\n  }\n/**\n * Styles for progressbar tail\n * @return {?}\n */\nshadowStyles() {\r\n    return {\r\n      boxShadow: `0 0 10px ${this.color}, 0 0 5px ${this.color}`\r\n    };\r\n  }\n/**\n * @param {?} n\n * @return {?}\n */\ntoPercentage(n) {\r\n    return ({\r\n      leftToRightIncreased: -1 + n,\r\n      leftToRightReduced: -n,\r\n      rightToLeftIncreased: 1 - n,\r\n      rightToLeftReduced: n\r\n    }[this.direction]) * 100;\r\n  }\n/**\n * @return {?}\n */\nspinnerClasses() {\r\n    return {\r\n      leftToRightIncreased: 'clockwise',\r\n      leftToRightReduced: 'anti-clockwise',\r\n      rightToLeftIncreased: 'anti-clockwise',\r\n      rightToLeftReduced: 'clockwise'\r\n    }[this.direction];\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'ng-progress-bar',\r\n  template: `\r\n  <div class=\"ng-progress\" *ngIf=\"state\" [class.active]=\"state.active\" [class.thick]=\"thick\">\r\n    <div class=\"bar\" [ngStyle]=\"barStyles()\">\r\n      <div class=\"bar-shadow\" [ngStyle]=\"shadowStyles()\"></div>\r\n    </div>\r\n    <div *ngIf=\"showSpinner\" class=\"spinner\" [ngClass]=\"spinnerClasses()\">\r\n      <div class=\"spinner-icon\" [style.borderTopColor]=\"color\" [style.borderLeftColor]=\"color\"></div>\r\n    </div>\r\n  </div>`,\r\n  styles: [`\r\n  .ng-progress {\r\n    z-index: 999999;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    position: fixed;\r\n    zoom: 1;\r\n    filter: alpha(opacity=0);\r\n    opacity: 0;\r\n    transition: opacity 200ms linear;\r\n  }\r\n\r\n  .active {\r\n    filter: alpha(opacity=100);\r\n    opacity: 1;\r\n    transition: none;\r\n  }\r\n\r\n  .bar {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 2px;\r\n  }\r\n\r\n  .thick .bar {\r\n    height: 3px;\r\n  }\r\n\r\n  .bar-shadow {\r\n    display: block;\r\n    position: absolute;\r\n    right: 0;\r\n    top: -3px;\r\n    width: 100px;\r\n    height: 100%;\r\n    opacity: 1.0;\r\n    -webkit-transform: rotate(3deg);\r\n    -ms-transform: rotate(3deg);\r\n    -moz-transform: rotate(3deg);\r\n    transform: rotate(3deg);\r\n  }\r\n\r\n\r\n  .thick .bar-shadow {\r\n    top: -4px;\r\n    -webkit-transform: rotate(4deg);\r\n    -ms-transform: rotate(4deg);\r\n    -moz-transform: rotate(4deg);\r\n    transform: rotate(4deg);\r\n  }\r\n\r\n  .thick .spinner-icon {\r\n    width: 24px;\r\n    height: 24px;\r\n    border: solid 3px transparent;\r\n  }\r\n\r\n  /* Remove these to get rid of the spinner */\r\n  .spinner {\r\n    display: block;\r\n    position: fixed;\r\n    z-index: 1031;\r\n    top: 15px;\r\n    right: 15px;\r\n  }\r\n\r\n  .spinner-icon {\r\n    width: 18px;\r\n    height: 18px;\r\n    box-sizing: border-box;\r\n\r\n    border: solid 2px transparent;\r\n    border-radius: 50%;\r\n\r\n    -webkit-animation: nprogress-spinner 400ms linear infinite;\r\n    -moz-animation: nprogress-spinner 400ms linear infinite;\r\n    animation: nprogress-spinner 400ms linear infinite;\r\n  }\r\n\r\n  .anti-clockwise .spinner-icon {\r\n    -webkit-animation-direction: reverse;\r\n    -moz-animation-direction: rotate(0deg);\r\n    animation-direction: reverse;\r\n  }\r\n\r\n  @-webkit-keyframes nprogress-spinner {\r\n    0% {\r\n      -webkit-transform: rotate(0deg);\r\n      -moz-transform: rotate(0deg);\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(360deg);\r\n      -moz-transform: rotate(360deg);\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n\r\n  @keyframes nprogress-spinner {\r\n    0% {\r\n      -webkit-transform: rotate(0deg);\r\n      -moz-transform: rotate(0deg);\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(360deg);\r\n      -moz-transform: rotate(360deg);\r\n      transform: rotate(360deg);\r\n    }\r\n  }`],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'positionUsing': [{ type: Input },],\n'ease': [{ type: Input },],\n'speed': [{ type: Input },],\n'showSpinner': [{ type: Input },],\n'direction': [{ type: Input },],\n'thick': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction ProgressBarComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressBarComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressBarComponent.ctorParameters;\n/** @type {?} */\nProgressBarComponent.propDecorators;\n/** @type {?} */\nProgressBarComponent.prototype.state;\n/** @type {?} */\nProgressBarComponent.prototype.positionUsing;\n/** @type {?} */\nProgressBarComponent.prototype.ease;\n/** @type {?} */\nProgressBarComponent.prototype.speed;\n/** @type {?} */\nProgressBarComponent.prototype.showSpinner;\n/** @type {?} */\nProgressBarComponent.prototype.direction;\n/** @type {?} */\nProgressBarComponent.prototype.thick;\n/** @type {?} */\nProgressBarComponent.prototype.color;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\r\n  Component, Input, ChangeDetectionStrategy, OnChanges, SimpleChanges\r\n} from '@angular/core';\r\nimport { NgProgress } from '../services/progress.service';\nexport class ProgressComponent implements OnChanges {\n/**\n * Progress options\n */\nease = 'linear';\r\n   positionUsing = 'margin';\r\n   showSpinner = true;\r\n   direction = 'leftToRightIncreased';\r\n   color = '#CC181E';\r\n   thick = false;\r\n   maximum = 1;\r\n   minimum = 0.08;\r\n   speed = 200;\r\n   trickleSpeed = 300;\n/**\n * Start/Stop Progressbar\n */\ntoggle;\n/**\n * @param {?} ngProgress\n */\nconstructor(public ngProgress: NgProgress) {\r\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\r\n\r\n    const /** @type {?} */ minChng = changes.minimum;\r\n    const /** @type {?} */ maxChng = changes.maximum;\r\n    const /** @type {?} */ spdChng = changes.speed;\r\n    const /** @type {?} */ tklSpdChng = changes.trickleSpeed;\r\n    const /** @type {?} */ tglChng = changes.toggle;\r\n\r\n    if (minChng) {\r\n      if (typeof minChng.currentValue !== 'undefined' && minChng.currentValue !== minChng.previousValue) {\r\n        if (minChng.currentValue < 0 || minChng.currentValue > 1) {\r\n          throw 'Input [minimum] must be between 0 and 1';\r\n        } else {\r\n          this.ngProgress.minimum = minChng.currentValue;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (maxChng) {\r\n      if (typeof maxChng.currentValue !== 'undefined' && maxChng.currentValue !== maxChng.previousValue) {\r\n        if (maxChng.currentValue < 0 || maxChng.currentValue > 1) {\r\n          throw 'Input [maximum] must be between 0 and 1';\r\n        } else {\r\n          this.ngProgress.maximum = maxChng.currentValue;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (spdChng) {\r\n      if (typeof spdChng.currentValue !== 'undefined' && spdChng.currentValue !== spdChng.previousValue) {\r\n        this.ngProgress.speed = spdChng.currentValue;\r\n      }\r\n    }\r\n\r\n    if (tklSpdChng) {\r\n      if (typeof tklSpdChng.currentValue !== 'undefined' && tklSpdChng.currentValue !== tklSpdChng.previousValue) {\r\n        this.ngProgress.trickleSpeed = tklSpdChng.currentValue;\r\n      }\r\n    }\r\n\r\n    if (tglChng) {\r\n      if (typeof tglChng.currentValue !== 'undefined' && tglChng.currentValue !== tglChng.previousValue) {\r\n        if (tglChng.currentValue) {\r\n          this.ngProgress.start();\r\n        } else {\r\n          this.ngProgress.done();\r\n        }\r\n      }\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'ng-progress',\r\n  template: `\r\n  <ng-progress-bar\r\n    [speed]=\"speed\"\r\n    [positionUsing]=\"positionUsing\"\r\n    [ease]=\"ease\"\r\n    [showSpinner]=\"showSpinner\"\r\n    [direction]=\"direction\"\r\n    [color]=\"color\"\r\n    [thick]=\"thick\"\r\n    [state]=\"ngProgress.state | async\"\r\n  ></ng-progress-bar>`,\r\n  styles: [`\r\n  :host {\r\n    z-index: 999999;\r\n    pointer-events: none;\r\n    position: relative;\r\n  }`],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgProgress, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ease': [{ type: Input },],\n'positionUsing': [{ type: Input },],\n'showSpinner': [{ type: Input },],\n'direction': [{ type: Input },],\n'color': [{ type: Input },],\n'thick': [{ type: Input },],\n'maximum': [{ type: Input },],\n'minimum': [{ type: Input },],\n'speed': [{ type: Input },],\n'trickleSpeed': [{ type: Input },],\n'toggle': [{ type: Input },],\n};\n}\n\nfunction ProgressComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressComponent.ctorParameters;\n/** @type {?} */\nProgressComponent.propDecorators;\n/**\n * Progress options\n * @type {?}\n */\nProgressComponent.prototype.ease;\n/** @type {?} */\nProgressComponent.prototype.positionUsing;\n/** @type {?} */\nProgressComponent.prototype.showSpinner;\n/** @type {?} */\nProgressComponent.prototype.direction;\n/** @type {?} */\nProgressComponent.prototype.color;\n/** @type {?} */\nProgressComponent.prototype.thick;\n/** @type {?} */\nProgressComponent.prototype.maximum;\n/** @type {?} */\nProgressComponent.prototype.minimum;\n/** @type {?} */\nProgressComponent.prototype.speed;\n/** @type {?} */\nProgressComponent.prototype.trickleSpeed;\n/**\n * Start/Stop Progressbar\n * @type {?}\n */\nProgressComponent.prototype.toggle;\n/** @type {?} */\nProgressComponent.prototype.ngProgress;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ProgressBarComponent } from '../components/progress-bar.component';\r\nimport { ProgressComponent } from '../components/progress.component';\r\nimport { NgProgress } from '../services/progress.service';\nexport class NgProgressModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  declarations: [\r\n    ProgressComponent,\r\n    ProgressBarComponent\r\n  ],\r\n  exports: [\r\n    ProgressComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  providers: [\r\n    NgProgress\r\n  ]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgProgressModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgProgressModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgProgressModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["clamp","n","min","max","NgProgress","_this","this","initState","active","value","state","BehaviorSubject","trickling","Subject","progress","maximum","minimum","speed","trickleSpeed","switchMap","Observable","timer","takeWhile","isStarted","do","inc","subscribe","prototype","start","set","next","done","Math","random","amount","updateState","hide_1","complete","setTimeout","isActive","decorators","type","Injectable","ctorParameters","NgProgressBrowserXhr","_super","ngProgress","call","currentRequest","__extends","build","xhr","onload","evt","onerror","onabort","onloadstart","event","BrowserXhr","NgProgressInterceptor","intercept","req","handle","finally","ProgressBarComponent","barStyles","styles","transition","ease","backgroundColor","color","toPercentage","leftToRightIncreased","leftToRightReduced","rightToLeftIncreased","rightToLeftReduced","direction","positionUsing","Object","assign","transform","-webkit-transform","-moz-transform","-o-transform","-ms-transform","marginLeft","shadowStyles","boxShadow","spinnerClasses","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","Input","showSpinner","thick","ProgressComponent","ngOnChanges","changes","minChng","maxChng","spdChng","tklSpdChng","tglChng","toggle","currentValue","previousValue","NgProgressModule","NgModule","declarations","exports","imports","CommonModule","providers"],"mappings":"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"}