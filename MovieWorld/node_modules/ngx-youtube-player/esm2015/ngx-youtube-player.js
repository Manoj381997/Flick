/**
 * @license ngx-youtube-library
 * Copyright (c) 2018 Oren Farhi
 * MIT license

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 */
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Injectable, Input, NgModule, NgZone, Output, Renderer2 } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReplaySubject } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @return {?}
 */
function win() {
    return window;
}
/**
 * @return {?}
 */
function YouTubeRef() {
    return win()['YT'];
}
/**
 * @return {?}
 */
function YouTubePlayerRef() {
    return YouTubeRef().Player;
}
const defaultSizes = {
    height: 270,
    width: 367
};
class YoutubePlayerService {
    /**
     * @param {?} zone
     */
    constructor(zone) {
        this.zone = zone;
        this.ytApiLoaded = false;
        this.api = new ReplaySubject(1);
        this.createApi();
    }
    /**
     * @param {?} options
     * @return {?}
     */
    loadPlayerApi(options) {
        const /** @type {?} */ doc = win().document;
        if (!this.ytApiLoaded) {
            this.ytApiLoaded = true;
            const /** @type {?} */ playerApiScript = doc.createElement('script');
            playerApiScript.type = 'text/javascript';
            playerApiScript.src = `${options.protocol}://www.youtube.com/iframe_api`;
            doc.body.appendChild(playerApiScript);
        }
    }
    /**
     * @param {?} elementId
     * @param {?} outputs
     * @param {?} sizes
     * @param {?=} videoId
     * @param {?=} playerVars
     * @return {?}
     */
    setupPlayer(elementId, outputs, sizes, videoId = '', playerVars) {
        const /** @type {?} */ createPlayer = () => {
            if (YouTubePlayerRef) {
                this.createPlayer(elementId, outputs, sizes, videoId, playerVars);
            }
        };
        this.api.subscribe(createPlayer);
    }
    /**
     * @param {?} player
     * @return {?}
     */
    play(player) {
        player.playVideo();
    }
    /**
     * @param {?} player
     * @return {?}
     */
    pause(player) {
        player.pauseVideo();
    }
    /**
     * @param {?} media
     * @param {?} player
     * @return {?}
     */
    playVideo(media, player) {
        const /** @type {?} */ id = media.id.videoId ? media.id.videoId : media.id;
        player.loadVideoById(id);
        this.play(player);
    }
    /**
     * @param {?} player
     * @return {?}
     */
    isPlaying(player) {
        // because YT is not loaded yet 1 is used - YT.PlayerState.PLAYING
        const /** @type {?} */ isPlayerReady = player && player.getPlayerState;
        const /** @type {?} */ playerState = isPlayerReady ? player.getPlayerState() : {};
        const /** @type {?} */ isPlayerPlaying = isPlayerReady
            ? playerState !== YouTubeRef().PlayerState.ENDED &&
                playerState !== YouTubeRef().PlayerState.PAUSED
            : false;
        return isPlayerPlaying;
    }
    /**
     * @param {?} elementId
     * @param {?} outputs
     * @param {?} sizes
     * @param {?=} videoId
     * @param {?=} playerVars
     * @return {?}
     */
    createPlayer(elementId, outputs, sizes, videoId = '', playerVars = {}) {
        const /** @type {?} */ playerSize = {
            height: sizes.height || defaultSizes.height,
            width: sizes.width || defaultSizes.width
        };
        const /** @type {?} */ ytPlayer = YouTubePlayerRef();
        return new ytPlayer(elementId, Object.assign({}, playerSize, { events: {
                onReady: (ev) => {
                    this.zone.run(() => outputs.ready && outputs.ready.next(ev.target));
                },
                onStateChange: (ev) => {
                    this.zone.run(() => outputs.change && outputs.change.next(ev));
                }
            }, playerVars,
            videoId }));
    }
    /**
     * @param {?} player
     * @param {?} isFullScreen
     * @return {?}
     */
    toggleFullScreen(player, isFullScreen) {
        let { height, width } = defaultSizes;
        if (!isFullScreen) {
            height = window.innerHeight;
            width = window.innerWidth;
        }
        player.setSize(width, height);
    }
    /**
     * @return {?}
     */
    generateUniqueId() {
        const /** @type {?} */ len = 7;
        return Math.random()
            .toString(35)
            .substr(2, len);
    }
    /**
     * @return {?}
     */
    createApi() {
        const /** @type {?} */ onYouTubeIframeAPIReady = () => {
            if (win()) {
                this.api.next(YouTubeRef());
            }
        };
        win()['onYouTubeIframeAPIReady'] = onYouTubeIframeAPIReady;
    }
}
YoutubePlayerService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
YoutubePlayerService.ctorParameters = () => [
    { type: NgZone, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class YoutubePlayerComponent {
    /**
     * @param {?} playerService
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(playerService, elementRef, renderer) {
        this.playerService = playerService;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.videoId = '';
        this.height = defaultSizes.height;
        this.width = defaultSizes.width;
        /**
         * \@description sets the protocol by the navigator object
         * if there is no window, it sets a default http protocol
         * unless the protocol is set from outside
         */
        this.protocol = this.getProtocol();
        this.playerVars = {};
        // player created and initialized - sends instance of the player
        this.ready = new EventEmitter();
        // state change: send the YT event with its state
        this.change = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        const /** @type {?} */ htmlId = this.playerService.generateUniqueId();
        const /** @type {?} */ playerSize = { height: this.height, width: this.width };
        const /** @type {?} */ container = this.renderer.selectRootElement('#yt-player-ngx-component');
        this.renderer.setAttribute(container, 'id', htmlId);
        this.playerService.loadPlayerApi({
            protocol: this.protocol
        });
        this.playerService.setupPlayer(htmlId, {
            change: this.change,
            ready: this.ready
        }, playerSize, this.videoId, this.playerVars);
    }
    /**
     * @return {?}
     */
    getProtocol() {
        const /** @type {?} */ hasWindow = window && window.location;
        const /** @type {?} */ protocol = hasWindow
            ? window.location.protocol.replace(':', '')
            : 'http';
        return protocol;
    }
}
YoutubePlayerComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'youtube-player',
                template: `
    <div id="yt-player-ngx-component"></div>
  `
            },] },
];
/** @nocollapse */
YoutubePlayerComponent.ctorParameters = () => [
    { type: YoutubePlayerService, },
    { type: ElementRef, },
    { type: Renderer2, },
];
YoutubePlayerComponent.propDecorators = {
    "videoId": [{ type: Input },],
    "height": [{ type: Input },],
    "width": [{ type: Input },],
    "protocol": [{ type: Input },],
    "playerVars": [{ type: Input },],
    "ready": [{ type: Output },],
    "change": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class YoutubePlayerModule {
}
YoutubePlayerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    YoutubePlayerComponent
                ],
                exports: [
                    YoutubePlayerComponent
                ],
                imports: [
                    CommonModule
                ],
                providers: [
                    YoutubePlayerService
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Angular library starter.
 * Build an Angular library compatible with AoT compilation & Tree shaking.
 * Copyright Roberto Simonetti.
 * MIT license.
 * https://github.com/robisim74/angular-library-starter
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { YoutubePlayerModule, YoutubePlayerComponent as ɵa, YoutubePlayerService as ɵb };
//# sourceMappingURL=ngx-youtube-player.js.map
