{"version":3,"file":"ngx-infinite-scroll.umd.min.js","sources":["../../src/services/ngx-ins-utils.ts","../../src/services/event-trigger.ts","../../src/services/position-resolver.ts","../../src/services/scroll-resolver.ts","../../src/services/scroll-register.ts","../../src/services/axis-resolver.ts","../../src/modules/infinite-scroll.directive.ts","../../src/modules/ngx-infinite-scroll.module.ts"],"sourcesContent":["import { ElementRef, SimpleChange } from '@angular/core';\n\nexport function resolveContainerElement(\n  selector: string | any,\n  scrollWindow,\n  defaultElement,\n  fromRoot: boolean\n): any {\n  const hasWindow = window && !!window.document && window.document.documentElement;\n  let container = hasWindow && scrollWindow ? window : defaultElement;\n  if (selector) {\n    const containerIsString =\n      selector && hasWindow && typeof selector === 'string';\n    container = containerIsString\n      ? findElement(selector, defaultElement.nativeElement, fromRoot)\n      : selector;\n    if (!container) {\n      throw new Error('ngx-infinite-scroll {resolveContainerElement()}: selector for');\n    }\n  }\n  return container;\n}\n\nexport function findElement(\n  selector: string | any,\n  customRoot: ElementRef | any,\n  fromRoot: boolean\n) {\n  const rootEl = fromRoot ? window.document : customRoot;\n  return rootEl.querySelector(selector);\n}\n\nexport function inputPropChanged(prop: SimpleChange): boolean {\n  return prop && !prop.firstChange;\n}\n\nexport function hasWindowDefined(): boolean {\n  return typeof window !== 'undefined';\n}\n","import { InfiniteScrollEvent, IPositionStats } from '../models';\n\nexport interface IScrollerProps {\n  container: IPositionStats;\n  down: number;\n  up: number;\n  alwaysCallback: boolean;\n  disabled: boolean;\n}\n\nexport interface ITriggerEvents {\n  down: (event: any) => any;\n  up: (event: any) => any;\n}\n\nexport interface IDistanceRange {\n  down: number;\n  up: number;\n}\n\nexport interface IScrollConfig {\n  alwaysCallback: boolean;\n  shouldFireScrollEvent: boolean;\n}\n\nexport function shouldTriggerEvents(\n  alwaysCallback: boolean,\n  shouldFireScrollEvent: boolean,\n  isTriggeredCurrentTotal: boolean) {\n  return (alwaysCallback || shouldFireScrollEvent) && !isTriggeredCurrentTotal;\n}\n","import { ElementRef } from '@angular/core';\n\nimport { ContainerRef, IPositionElements, IPositionStats, IResolver } from '../models';\nimport { AxisResolver } from './axis-resolver';\n\nexport function createResolver({\n  windowElement,\n  axis\n}: IPositionElements): IResolver {\n  return createResolverWithContainer(\n    { axis, isWindow: isElementWindow(windowElement) },\n    windowElement\n  );\n}\n\nexport function createResolverWithContainer(\n  resolver,\n  windowElement: ContainerRef\n) {\n  const container =\n    resolver.isWindow || (windowElement && !windowElement.nativeElement)\n      ? windowElement\n      : windowElement.nativeElement;\n  return { ...resolver, container };\n}\n\nexport function isElementWindow(windowElement: ContainerRef): boolean {\n  const isWindow = ['Window', 'global'].some((obj: string) =>\n    Object.prototype.toString.call(windowElement).includes(obj)\n  );\n  return isWindow;\n}\n\nexport function getDocumentElement(isContainerWindow: boolean, windowElement) {\n  return isContainerWindow ? windowElement.document.documentElement : null;\n}\n\nexport function calculatePoints(element: ElementRef, resolver: IResolver) {\n  const height = extractHeightForElement(resolver);\n  return resolver.isWindow\n    ? calculatePointsForWindow(height, element, resolver)\n    : calculatePointsForElement(height, element, resolver);\n}\n\nexport function calculatePointsForWindow(\n  height: number,\n  element: ElementRef,\n  resolver: IResolver\n): IPositionStats {\n  const { axis, container, isWindow } = resolver;\n  const { offsetHeightKey, clientHeightKey } = extractHeightPropKeys(axis);\n  // scrolled until now / current y point\n  const scrolled =\n    height +\n    getElementPageYOffset(\n      getDocumentElement(isWindow, container),\n      axis,\n      isWindow\n    );\n  // total height / most bottom y point\n  const nativeElementHeight = getElementHeight(\n    element.nativeElement,\n    isWindow,\n    offsetHeightKey,\n    clientHeightKey\n  );\n  const totalToScroll =\n    getElementOffsetTop(element.nativeElement, axis, isWindow) +\n    nativeElementHeight;\n  return { height, scrolled, totalToScroll };\n}\n\nexport function calculatePointsForElement(\n  height: number,\n  element: ElementRef,\n  resolver: IResolver\n): IPositionStats {\n  const { axis, container } = resolver;\n  // perhaps use container.offsetTop instead of 'scrollTop'\n  const scrolled = container[axis.scrollTopKey()];\n  const totalToScroll = container[axis.scrollHeightKey()];\n  return { height, scrolled, totalToScroll };\n}\n\nexport function extractHeightPropKeys(axis: AxisResolver) {\n  return {\n    offsetHeightKey: axis.offsetHeightKey(),\n    clientHeightKey: axis.clientHeightKey()\n  };\n}\n\nexport function extractHeightForElement({\n  container,\n  isWindow,\n  axis\n}: IResolver) {\n  const { offsetHeightKey, clientHeightKey } = extractHeightPropKeys(axis);\n  return getElementHeight(\n    container,\n    isWindow,\n    offsetHeightKey,\n    clientHeightKey\n  );\n}\nexport function getElementHeight(\n  elem: any,\n  isWindow: boolean,\n  offsetHeightKey: string,\n  clientHeightKey: string\n) {\n  if (isNaN(elem[offsetHeightKey])) {\n    const docElem = getDocumentElement(isWindow, elem);\n    return docElem ? docElem[clientHeightKey] : 0;\n  } else {\n    return elem[offsetHeightKey];\n  }\n}\n\nexport function getElementOffsetTop(\n  elem: ContainerRef,\n  axis: AxisResolver,\n  isWindow: boolean\n) {\n  const topKey = axis.topKey();\n  // elem = elem.nativeElement;\n  if (!elem.getBoundingClientRect) {\n    // || elem.css('none')) {\n    return;\n  }\n  return (\n    elem.getBoundingClientRect()[topKey] +\n    getElementPageYOffset(elem, axis, isWindow)\n  );\n}\n\nexport function getElementPageYOffset(\n  elem: ContainerRef,\n  axis: AxisResolver,\n  isWindow: boolean\n) {\n  const pageYOffset = axis.pageYOffsetKey();\n  const scrollTop = axis.scrollTopKey();\n  const offsetTop = axis.offsetTopKey();\n\n  if (isNaN(window[pageYOffset])) {\n    return getDocumentElement(isWindow, elem)[scrollTop];\n  } else if (elem.ownerDocument) {\n    return elem.ownerDocument.defaultView[pageYOffset];\n  } else {\n    return elem[offsetTop];\n  }\n}\n","import { IPositionStats, IScrollState, IScrollerDistance } from '../models';\n\nexport function shouldFireScrollEvent(\n  container: IPositionStats,\n  distance: IScrollerDistance,\n  scrollingDown: boolean\n) {\n  let remaining: number;\n  let containerBreakpoint: number;\n  if (container.totalToScroll <= 0) {\n    return false;\n  }\n  const scrolledUntilNow = container.height + container.scrolled;\n  if (scrollingDown) {\n    remaining =\n      (container.totalToScroll - scrolledUntilNow) / container.totalToScroll;\n    containerBreakpoint = distance.down / 10;\n  } else {\n    const totalHiddenContentHeight =\n      container.scrolled + (container.totalToScroll - scrolledUntilNow);\n    remaining = container.scrolled / totalHiddenContentHeight;\n    containerBreakpoint = distance.up / 10;\n  }\n\n  const shouldFireEvent: boolean = remaining <= containerBreakpoint;\n  return shouldFireEvent;\n}\n\nexport function isScrollingDownwards(\n  lastScrollPosition: number,\n  container: IPositionStats\n) {\n  return lastScrollPosition < container.scrolled;\n}\n\nexport function getScrollStats(\n  lastScrollPosition: number,\n  container: IPositionStats,\n  distance: IScrollerDistance\n) {\n  const scrollDown = isScrollingDownwards(lastScrollPosition, container);\n  return {\n    fire: shouldFireScrollEvent(container, distance, scrollDown),\n    scrollDown\n  };\n}\n\nexport function updateScrollPosition(\n  position: number,\n  scrollState: IScrollState\n) {\n  return (scrollState.lastScrollPosition = position);\n}\n\nexport function updateTotalToScroll(\n  totalToScroll: number,\n  scrollState: IScrollState\n) {\n  if (scrollState.lastTotalToScroll !== totalToScroll) {\n    scrollState.lastTotalToScroll = scrollState.totalToScroll;\n    scrollState.totalToScroll = totalToScroll;\n  }\n}\n\nexport function isSameTotalToScroll(scrollState: IScrollState) {\n  return scrollState.totalToScroll === scrollState.lastTotalToScroll;\n}\n\nexport function updateTriggeredFlag(\n  scroll,\n  scrollState: IScrollState,\n  triggered: boolean,\n  isScrollingDown: boolean\n) {\n  if (isScrollingDown) {\n    scrollState.triggered.down = scroll;\n  } else {\n    scrollState.triggered.up = scroll;\n  }\n}\n\nexport function isTriggeredScroll(\n  totalToScroll,\n  scrollState: IScrollState,\n  isScrollingDown: boolean\n) {\n  return isScrollingDown\n    ? scrollState.triggered.down === totalToScroll\n    : scrollState.triggered.up === totalToScroll;\n}\n\nexport function updateScrollState(\n  scrollState: IScrollState,\n  scrolledUntilNow: number,\n  totalToScroll: number\n) {\n  updateScrollPosition(scrolledUntilNow, scrollState);\n  updateTotalToScroll(totalToScroll, scrollState);\n  // const isSameTotal = isSameTotalToScroll(scrollState);\n  // if (!isSameTotal) {\n  //   updateTriggeredFlag(scrollState, false, isScrollingDown);\n  // }\n}\n","import { Observable, of, fromEvent } from \"rxjs\";\nimport { map, mergeMap, tap, sampleTime, filter } from \"rxjs/operators\";\n\nimport * as Models from \"../models\";\nimport { AxisResolver } from \"./axis-resolver\";\nimport { shouldTriggerEvents, IScrollConfig } from \"./event-trigger\";\nimport { resolveContainerElement } from \"./ngx-ins-utils\";\nimport { calculatePoints, createResolver } from \"./position-resolver\";\nimport * as ScrollResolver from \"./scroll-resolver\";\n\nexport function createScroller(config: Models.IScroller) {\n  const { scrollContainer, scrollWindow, element, fromRoot } = config;\n  const resolver = createResolver({\n    axis: new AxisResolver(!config.horizontal),\n    windowElement: resolveContainerElement(\n      scrollContainer,\n      scrollWindow,\n      element,\n      fromRoot\n    )\n  });\n  const { totalToScroll: startWithTotal } = calculatePoints(element, resolver);\n  const scrollState: Models.IScrollState = {\n    lastScrollPosition: 0,\n    lastTotalToScroll: 0,\n    totalToScroll: startWithTotal,\n    triggered: {\n      down: 0,\n      up: 0\n    }\n  };\n  const options: Models.IScrollRegisterConfig = {\n    container: resolver.container,\n    throttle: config.throttle\n  };\n  const distance = {\n    up: config.upDistance,\n    down: config.downDistance\n  };\n  return attachScrollEvent(options).pipe(\n    mergeMap((ev: any) => of(calculatePoints(element, resolver))),\n    map((positionStats: Models.IPositionStats) =>\n      toInfiniteScrollParams(\n        scrollState.lastScrollPosition,\n        positionStats,\n        distance\n      )\n    ),\n    tap(({ stats, scrollDown }: Models.IScrollParams) =>\n      ScrollResolver.updateScrollState(\n        scrollState,\n        stats.scrolled,\n        stats.totalToScroll\n      )\n    ),\n    filter(\n      ({ fire, scrollDown, stats: { totalToScroll } }: Models.IScrollParams) =>\n        shouldTriggerEvents(\n          config.alwaysCallback,\n          fire,\n          ScrollResolver.isTriggeredScroll(\n            totalToScroll,\n            scrollState,\n            scrollDown\n          )\n        )\n    ),\n    tap(({ scrollDown, stats: { totalToScroll } }: Models.IScrollParams) => {\n      ScrollResolver.updateTriggeredFlag(\n        totalToScroll,\n        scrollState,\n        true,\n        scrollDown\n      );\n    }),\n    map(toInfiniteScrollAction)\n  );\n}\n\nexport function attachScrollEvent(\n  options: Models.IScrollRegisterConfig\n): Observable<{}> {\n  let obs = fromEvent(options.container, \"scroll\");\n  // For an unknown reason calling `sampleTime()` causes trouble for many users, even with `options.throttle = 0`.\n  // Let's avoid calling the function unless needed.\n  // See https://github.com/orizens/ngx-infinite-scroll/issues/198\n  if (options.throttle) {\n    obs = obs.pipe(sampleTime(options.throttle));\n  }\n  return obs;\n}\n\nexport function toInfiniteScrollParams(\n  lastScrollPosition: number,\n  stats: Models.IPositionStats,\n  distance: Models.IScrollerDistance\n): Models.IScrollParams {\n  const { scrollDown, fire } = ScrollResolver.getScrollStats(\n    lastScrollPosition,\n    stats,\n    distance\n  );\n  return {\n    scrollDown,\n    fire,\n    stats\n  };\n}\n\nexport const InfiniteScrollActions = {\n  DOWN: \"[NGX_ISE] DOWN\",\n  UP: \"[NGX_ISE] UP\"\n};\n\nexport function toInfiniteScrollAction(\n  response: Models.IScrollParams\n): Models.IInfiniteScrollAction {\n  const { scrollDown, stats: { scrolled: currentScrollPosition } } = response;\n  return {\n    type: scrollDown ? InfiniteScrollActions.DOWN : InfiniteScrollActions.UP,\n    payload: {\n      currentScrollPosition\n    }\n  };\n}\n","const VerticalProps = {\n  clientHeight: \"clientHeight\",\n  offsetHeight: \"offsetHeight\",\n  scrollHeight: \"scrollHeight\",\n  pageYOffset: \"pageYOffset\",\n  offsetTop: \"offsetTop\",\n  scrollTop: \"scrollTop\",\n  top: \"top\"\n};\n\nconst HorizontalProps = {\n  clientHeight: \"clientWidth\",\n  offsetHeight: \"offsetWidth\",\n  scrollHeight: \"scrollWidth\",\n  pageYOffset: \"pageXOffset\",\n  offsetTop: \"offsetLeft\",\n  scrollTop: \"scrollLeft\",\n  top: \"left\"\n};\n\nexport class AxisResolver {\n  private propsMap: any;\n\n  constructor(private vertical: boolean = true) {\n    this.propsMap = vertical ? VerticalProps : HorizontalProps;\n  }\n  clientHeightKey() {\n    return this.propsMap.clientHeight;\n  }\n  offsetHeightKey() {\n    return this.propsMap.offsetHeight;\n  }\n  scrollHeightKey() {\n    return this.propsMap.scrollHeight;\n  }\n  pageYOffsetKey() {\n    return this.propsMap.pageYOffset;\n  }\n  offsetTopKey() {\n    return this.propsMap.offsetTop;\n  }\n  scrollTopKey() {\n    return this.propsMap.scrollTop;\n  }\n  topKey() {\n    return this.propsMap.top;\n  }\n}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport { InfiniteScrollEvent, IInfiniteScrollAction } from '../models';\nimport { hasWindowDefined, inputPropChanged } from '../services/ngx-ins-utils';\nimport { createScroller, InfiniteScrollActions } from '../services/scroll-register';\n\n@Directive({\n  selector: '[infiniteScroll], [infinite-scroll], [data-infinite-scroll]'\n})\nexport class InfiniteScrollDirective\n  implements OnDestroy, OnChanges, AfterViewInit {\n  @Output() scrolled = new EventEmitter<InfiniteScrollEvent>();\n  @Output() scrolledUp = new EventEmitter<InfiniteScrollEvent>();\n\n  @Input() infiniteScrollDistance: number = 2;\n  @Input() infiniteScrollUpDistance: number = 1.5;\n  @Input() infiniteScrollThrottle: number = 150;\n  @Input() infiniteScrollDisabled: boolean = false;\n  @Input() infiniteScrollContainer: any = null;\n  @Input() scrollWindow: boolean = true;\n  @Input() immediateCheck: boolean = false;\n  @Input() horizontal: boolean = false;\n  @Input() alwaysCallback: boolean = false;\n  @Input() fromRoot: boolean = false;\n\n  private disposeScroller: Subscription;\n\n  constructor(private element: ElementRef, private zone: NgZone) { }\n\n  ngAfterViewInit() {\n    if (!this.infiniteScrollDisabled) {\n      this.setup();\n    }\n  }\n\n  ngOnChanges({ infiniteScrollContainer, infiniteScrollDisabled, infiniteScrollDistance }: SimpleChanges) {\n    const containerChanged = inputPropChanged(infiniteScrollContainer);\n    const disabledChanged = inputPropChanged(infiniteScrollDisabled);\n    const distanceChanged = inputPropChanged(infiniteScrollDistance);\n    const shouldSetup = (!disabledChanged && !this.infiniteScrollDisabled) ||\n      (disabledChanged && !infiniteScrollDisabled.currentValue) || distanceChanged;\n\n    if (containerChanged || disabledChanged || distanceChanged) {\n      this.destroyScroller();\n      if (shouldSetup) {\n        this.setup();\n      }\n    }\n  }\n\n  setup() {\n    if (hasWindowDefined()) {\n      this.zone.runOutsideAngular(() => {\n        this.disposeScroller = createScroller({\n          fromRoot: this.fromRoot,\n          alwaysCallback: this.alwaysCallback,\n          disable: this.infiniteScrollDisabled,\n          downDistance: this.infiniteScrollDistance,\n          element: this.element,\n          horizontal: this.horizontal,\n          scrollContainer: this.infiniteScrollContainer,\n          scrollWindow: this.scrollWindow,\n          throttle: this.infiniteScrollThrottle,\n          upDistance: this.infiniteScrollUpDistance\n        }).subscribe((payload: any) => this.zone.run(() => this.handleOnScroll(payload)));\n      });\n    }\n  }\n\n  handleOnScroll({ type, payload }: IInfiniteScrollAction) {\n    switch (type) {\n      case InfiniteScrollActions.DOWN:\n        return this.scrolled.emit(payload);\n\n      case InfiniteScrollActions.UP:\n        return this.scrolledUp.emit(payload);\n\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyScroller();\n  }\n\n  destroyScroller() {\n    if (this.disposeScroller) {\n      this.disposeScroller.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { InfiniteScrollDirective } from './infinite-scroll.directive';\n\n@NgModule({\n  declarations: [InfiniteScrollDirective],\n  exports: [InfiniteScrollDirective],\n  imports: [],\n  providers: []\n})\nexport class InfiniteScrollModule { }\n"],"names":["resolveContainerElement","selector","scrollWindow","defaultElement","fromRoot","hasWindow","window","document","documentElement","container","findElement","nativeElement","Error","customRoot","querySelector","inputPropChanged","prop","firstChange","hasWindowDefined","shouldTriggerEvents","alwaysCallback","shouldFireScrollEvent","isTriggeredCurrentTotal","createResolver","_a","windowElement","createResolverWithContainer","axis","isWindow","isElementWindow","resolver","Object","assign","some","obj","prototype","toString","call","includes","getDocumentElement","isContainerWindow","calculatePoints","element","height","extractHeightForElement","calculatePointsForWindow","calculatePointsForElement","extractHeightPropKeys","offsetHeightKey","clientHeightKey","scrolled","getElementPageYOffset","nativeElementHeight","getElementHeight","totalToScroll","getElementOffsetTop","scrollTopKey","scrollHeightKey","_b","elem","isNaN","docElem","topKey","getBoundingClientRect","pageYOffset","pageYOffsetKey","scrollTop","offsetTop","offsetTopKey","ownerDocument","defaultView","distance","scrollingDown","remaining","containerBreakpoint","scrolledUntilNow","down","totalHiddenContentHeight","up","isScrollingDownwards","lastScrollPosition","getScrollStats","scrollDown","fire","updateScrollPosition","position","scrollState","updateTotalToScroll","lastTotalToScroll","updateTriggeredFlag","scroll","triggered","isScrollingDown","isTriggeredScroll","updateScrollState","createScroller","config","scrollContainer","AxisResolver","horizontal","startWithTotal","options","throttle","upDistance","downDistance","attachScrollEvent","pipe","mergeMap","ev","of","map","positionStats","toInfiniteScrollParams","tap","stats","ScrollResolver.updateScrollState","filter","ScrollResolver.isTriggeredScroll","ScrollResolver.updateTriggeredFlag","toInfiniteScrollAction","obs","fromEvent","sampleTime","response","currentScrollPosition","type","InfiniteScrollActions","DOWN","UP","payload","VerticalProps","clientHeight","offsetHeight","scrollHeight","top","HorizontalProps","vertical","this","propsMap","InfiniteScrollDirective","zone","EventEmitter","scrolledUp","infiniteScrollDistance","infiniteScrollUpDistance","infiniteScrollThrottle","infiniteScrollDisabled","infiniteScrollContainer","immediateCheck","ngAfterViewInit","setup","ngOnChanges","containerChanged","disabledChanged","distanceChanged","shouldSetup","currentValue","destroyScroller","_this","runOutsideAngular","disposeScroller","disable","subscribe","run","handleOnScroll","emit","ngOnDestroy","unsubscribe","Directive","args","ElementRef","NgZone","Output","Input","InfiniteScrollModule","NgModule","declarations","exports","imports","providers"],"mappings":"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"}