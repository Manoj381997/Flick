{"version":3,"file":"ngx-wow.umd.min.js","sources":["../../tmp/services/window.service.ts","../../tmp/services/wow.service.ts","../../tmp/wow.module.ts","../../tmp/models/wow-config.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * Service to interact with the window object.\n */\n\nexport class WindowService {\n\n  get nativeWindow(): Window {\n    return _window();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\nfunction _window(): Window {\n  // Return the global native browser window object\n  return typeof window !== 'undefined' ? window : undefined;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\nimport { NgwWowConfig } from '../models/index';\nimport { WindowService } from './window.service';\n\n/**\n * Basic type to represent the `WOW` object from `WOW.js` library.\n */\nexport interface WOW {\n  /**\n     * Initializes the WOW.js library\n     * @param config the custom configuration to use\n     */\n  init(config?: NgwWowConfig): void;\n}\n/**\n * Type definition for the `WOW` object from `WOW.js` library.\n */\ndeclare var WOW: {\n  new (config?: NgwWowConfig): WOW;\n};\n\n\nexport class NgwWowService {\n\n  // Window Object\n  private window: Window;\n\n  // Observable  source that emits the box that is about to be shown by WOW\n  private itemRevealedSource: Subject<HTMLElement>;\n  // Observable users can subscribed to, in order to be notified when the box element is about to be shown by WOW\n  itemRevealed$: Observable<HTMLElement>;\n\n  constructor(windowService: WindowService) {\n    // Observable  source\n    this.itemRevealedSource = new Subject<HTMLElement>();\n    // Observable  stream\n    this.itemRevealed$ = this.itemRevealedSource.asObservable();\n\n    this.window = windowService.nativeWindow;\n  }\n\n  init(config?: NgwWowConfig): void {\n    if (this.window) { // For Angular Universal suport\n      let conf = config || {};\n      // Set callback hook:\n      conf.callback = () => this.itemRevealedSource.next();\n\n      // Initializes the library\n      new WOW(config).init();\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: WindowService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { WindowService, NgwWowService } from './services/index';\n\n/**\n * Main module of the library\n */\n\nexport class NgwWowModule {\n\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgwWowModule,\n      providers: [WindowService, NgwWowService]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Configuration for the NgwWowService service.\n */\nexport class NgwWowConfig {\n\n  /**\n   * Class name that reveals the hidden box when user scrolls.\n   */\n  boxClass?= 'wow';\n\n  /**\n   * Class name that triggers the CSS animations ('animated' by default for the animate.css library)\n   */\n  animateClass?= 'animated';\n\n  /**\n   * Define the distance between the bottom of browser viewport and the top of hidden box.\n   * When the user scrolls and reach this distance the hidden box is revealed.\n   */\n  offset?= 0;\n\n  /**\n   * Turn on/off WOW.js on mobile devices.\n   */\n  mobile?= true;\n\n  /**\n   * Consatantly check for new WOW elements on the page.\n   */\n  live?= true;\n\n  /**\n   * Callback called when the given box element is shown.\n   */\n  callback?: (box: HTMLElement) => void;\n\n  scrollContainer?: HTMLElement;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["window","undefined","Object","WindowService","_window","type","Injectable","windowService","this","itemRevealedSource","Subject","itemRevealed$","asObservable","nativeWindow","NgwWowService","config","callback","_this","next","WOW","init","NgwWowModule","ngModule","providers","NgModule","args","imports","CommonModule"],"mappings":"uVAmBA,aAEE,MAAyB,oBAAXA,OAAyBA,YAASC,EAflD,iBAAA,cAWA,OATEC,sBAAIC,gCAAJ,WACE,OAAOC,qCAEJD,eACLE,KAAMC,eAGDH,sCCoBL,WAAYI,GAEVC,KAAKC,mBAAqB,IAAIC,UAE9BF,KAAKG,cAAgBH,KAAKC,mBAAmBG,eAE7CJ,KAAKR,OAASO,EAAcM,aAqBhC,OAlBEC,iBAAA,SAAKC,GAAL,WACMP,KAAKR,UACIe,OAENC,SAAW,WAAM,OAAAC,EAAKR,mBAAmBS,QAG9C,IAAIC,IAAIJ,GAAQK,SAIfN,eACLT,KAAMC,eAGDQ,mBACNT,KAAMF,sBCnDP,cAkBA,OAhBSkB,UAAP,WACE,OACEC,SAAUD,EACVE,WAAYpB,EAAeW,KAG1BO,eACLhB,KAAMmB,WAAUC,OAChBC,SACEC,oBAKGN,sCCYP,OAlCA,WAKEb,cAAW,MAKXA,kBAAe,WAMfA,YAAS,EAKTA,aAAS,EAKTA,WAAO"}