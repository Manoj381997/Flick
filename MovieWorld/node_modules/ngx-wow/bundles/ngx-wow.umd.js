(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs/Subject')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', 'rxjs/Subject'], factory) :
	(factory((global.ngxWow = {}),global.ng.core,global.ng.common,global.Rx));
}(this, (function (exports,core,common,Subject) { 'use strict';

/**
 * Service to interact with the window object.
 */
var WindowService = (function () {
    function WindowService() {
    }
    Object.defineProperty(WindowService.prototype, "nativeWindow", {
        get: function () {
            return _window();
        },
        enumerable: true,
        configurable: true
    });
    WindowService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    WindowService.ctorParameters = [];
    return WindowService;
}());
function _window() {
    // Return the global native browser window object
    return typeof window !== 'undefined' ? window : undefined;
}

var NgwWowService = (function () {
    function NgwWowService(windowService) {
        // Observable  source
        this.itemRevealedSource = new Subject.Subject();
        // Observable  stream
        this.itemRevealed$ = this.itemRevealedSource.asObservable();
        this.window = windowService.nativeWindow;
    }
    NgwWowService.prototype.init = function (config) {
        var _this = this;
        if (this.window) {
            var conf = config || {};
            // Set callback hook:
            conf.callback = function () { return _this.itemRevealedSource.next(); };
            // Initializes the library
            new WOW(config).init();
        }
    };
    NgwWowService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    NgwWowService.ctorParameters = [
        { type: WindowService, },
    ];
    return NgwWowService;
}());

/**
 * Main module of the library
 */
var NgwWowModule = (function () {
    function NgwWowModule() {
    }
    NgwWowModule.forRoot = function () {
        return {
            ngModule: NgwWowModule,
            providers: [WindowService, NgwWowService]
        };
    };
    NgwWowModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ]
                },] },
    ];
    /** @nocollapse */
    NgwWowModule.ctorParameters = [];
    return NgwWowModule;
}());

/**
 * Configuration for the NgwWowService service.
 */
var NgwWowConfig = (function () {
    function NgwWowConfig() {
        /**
         * Class name that reveals the hidden box when user scrolls.
         */
        this.boxClass = 'wow';
        /**
         * Class name that triggers the CSS animations ('animated' by default for the animate.css library)
         */
        this.animateClass = 'animated';
        /**
         * Define the distance between the bottom of browser viewport and the top of hidden box.
         * When the user scrolls and reach this distance the hidden box is revealed.
         */
        this.offset = 0;
        /**
         * Turn on/off WOW.js on mobile devices.
         */
        this.mobile = true;
        /**
         * Consatantly check for new WOW elements on the page.
         */
        this.live = true;
    }
    return NgwWowConfig;
}());

exports.NgwWowModule = NgwWowModule;
exports.NgwWowConfig = NgwWowConfig;
exports.WindowService = WindowService;
exports.NgwWowService = NgwWowService;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-wow.umd.js.map
