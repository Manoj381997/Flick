{"version":3,"file":"wow.service.js","sourceRoot":"","sources":["../../services/wow.service.ts"],"names":[],"mappings":"OAAO,EAAE,UAAU,EAAE,MAAM,eAAe;OAEnC,EAAE,OAAO,EAAE,MAAM,cAAc;OAG/B,EAAE,aAAa,EAAE,MAAM,kBAAkB;AAoBhD;IAUE,uBAAY,aAA4B;QACtC,qBAAqB;QACrB,IAAI,CAAC,kBAAkB,GAAG,IAAI,OAAO,EAAe,CAAC;QACrD,qBAAqB;QACrB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;QAE5D,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,YAAY,CAAC;IAC3C,CAAC;IAED,4BAAI,GAAJ,UAAK,MAAqB;QAA1B,iBASC;QARC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,IAAI,IAAI,GAAG,MAAM,IAAI,EAAE,CAAC;YACxB,qBAAqB;YACrB,IAAI,CAAC,QAAQ,GAAG,cAAM,OAAA,KAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,EAA9B,CAA8B,CAAC;YAErD,0BAA0B;YAC1B,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;QACzB,CAAC;IACH,CAAC;IAEI,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,4BAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,aAAa,GAAG;KACtB,CAAC;IACF,oBAAC;AAAD,CAAC,AArCD,IAqCC","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\nimport { NgwWowConfig } from '../models/index';\nimport { WindowService } from './window.service';\n\n/**\n * Basic type to represent the `WOW` object from `WOW.js` library.\n */\nexport interface WOW {\n  /**\n     * Initializes the WOW.js library\n     * @param config the custom configuration to use\n     */\n  init(config?: NgwWowConfig): void;\n}\n/**\n * Type definition for the `WOW` object from `WOW.js` library.\n */\ndeclare var WOW: {\n  new (config?: NgwWowConfig): WOW;\n};\n\n\nexport class NgwWowService {\n\n  // Window Object\n  private window: Window;\n\n  // Observable  source that emits the box that is about to be shown by WOW\n  private itemRevealedSource: Subject<HTMLElement>;\n  // Observable users can subscribed to, in order to be notified when the box element is about to be shown by WOW\n  itemRevealed$: Observable<HTMLElement>;\n\n  constructor(windowService: WindowService) {\n    // Observable  source\n    this.itemRevealedSource = new Subject<HTMLElement>();\n    // Observable  stream\n    this.itemRevealed$ = this.itemRevealedSource.asObservable();\n\n    this.window = windowService.nativeWindow;\n  }\n\n  init(config?: NgwWowConfig): void {\n    if (this.window) { // For Angular Universal suport\n      let conf = config || {};\n      // Set callback hook:\n      conf.callback = () => this.itemRevealedSource.next();\n\n      // Initializes the library\n      new WOW(config).init();\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: WindowService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}