System.register("ngx-loading-bar/LoadingBarService", ["@angular/core"], function (exports_1, context_1) {
    var __moduleName = context_1 && context_1.id;
    var core_1, LoadingBarService;
    return {
        setters: [
            function (core_1_1) {
                core_1 = core_1_1;
            }
        ],
        execute: function () {
            LoadingBarService = (function () {
                function LoadingBarService() {
                    this.onStart = new core_1.EventEmitter();
                    this.onStop = new core_1.EventEmitter();
                    this.onComplete = new core_1.EventEmitter();
                    this.onReset = new core_1.EventEmitter();
                }
                LoadingBarService.prototype.start = function () {
                    this.onStart.emit(undefined);
                };
                LoadingBarService.prototype.stop = function () {
                    this.onStop.emit(undefined);
                };
                LoadingBarService.prototype.complete = function () {
                    this.onComplete.emit(undefined);
                };
                LoadingBarService.prototype.reset = function () {
                    this.onReset.emit(undefined);
                };
                return LoadingBarService;
            }());
            LoadingBarService = __decorate([
                core_1.Injectable()
            ], LoadingBarService);
            exports_1("LoadingBarService", LoadingBarService);
        }
    };
});
System.register("ngx-loading-bar/LoadingBar", ["@angular/core", "@angular/router", "ngx-loading-bar/LoadingBarService"], function (exports_2, context_2) {
    var __moduleName = context_2 && context_2.id;
    var core_2, router_1, LoadingBarService_1, LoadingBar;
    return {
        setters: [
            function (core_2_1) {
                core_2 = core_2_1;
            },
            function (router_1_1) {
                router_1 = router_1_1;
            },
            function (LoadingBarService_1_1) {
                LoadingBarService_1 = LoadingBarService_1_1;
            }
        ],
        execute: function () {
            LoadingBar = (function () {
                // -------------------------------------------------------------------------
                // Constructor
                // -------------------------------------------------------------------------
                function LoadingBar(loadingBarService, router) {
                    this.loadingBarService = loadingBarService;
                    this.router = router;
                    // -------------------------------------------------------------------------
                    // Inputs / Outputs
                    // -------------------------------------------------------------------------
                    this.color = "#4092F1";
                    this.height = 2;
                    this.animationTime = 0.5;
                    this.runInterval = 300;
                    this.progress = 0;
                    this.listenRouterEvents = false;
                    // -------------------------------------------------------------------------
                    // Public Properties
                    // -------------------------------------------------------------------------
                    this.visible = false;
                }
                // -------------------------------------------------------------------------
                // Lifecycle listeners
                // -------------------------------------------------------------------------
                LoadingBar.prototype.ngOnInit = function () {
                    var _this = this;
                    if (this.loadingBarService) {
                        this.loadingBarService.onStart.subscribe(function () { return _this.start(); });
                        this.loadingBarService.onStop.subscribe(function () { return _this.stop(); });
                        this.loadingBarService.onReset.subscribe(function () { return _this.reset(); });
                        this.loadingBarService.onComplete.subscribe(function () { return _this.complete(); });
                    }
                    if (this.listenRouterEvents) {
                        this.routerEventSubscriber = this.router.events.subscribe(function (event) {
                            if (!_this.routerEventsFilter || _this.routerEventsFilter(event)) {
                                if (event instanceof router_1.NavigationStart) {
                                    _this.start();
                                }
                                else if (event instanceof router_1.NavigationEnd || event instanceof router_1.NavigationCancel || event instanceof router_1.NavigationError) {
                                    _this.complete();
                                }
                            }
                        });
                    }
                };
                LoadingBar.prototype.ngOnDestroy = function () {
                    if (this.loadingBarService) {
                        this.loadingBarService.onStart.unsubscribe();
                        this.loadingBarService.onStop.unsubscribe();
                        this.loadingBarService.onReset.unsubscribe();
                        this.loadingBarService.onComplete.unsubscribe();
                    }
                    if (this.routerEventSubscriber) {
                        this.routerEventSubscriber.unsubscribe();
                    }
                };
                // -------------------------------------------------------------------------
                // Public Methods
                // -------------------------------------------------------------------------
                LoadingBar.prototype.start = function () {
                    var _this = this;
                    this.stop();
                    this.visible = true;
                    this.runningInterval = setInterval(function () {
                        _this.progress++;
                        if (_this.progress === 100)
                            _this.complete();
                    }, this.runInterval);
                };
                LoadingBar.prototype.stop = function () {
                    if (this.runningInterval) {
                        clearInterval(this.runningInterval);
                        this.runningInterval = null;
                    }
                };
                LoadingBar.prototype.reset = function () {
                    this.stop();
                    this.progress = 0;
                };
                LoadingBar.prototype.complete = function () {
                    var _this = this;
                    this.progress = 100;
                    this.stop();
                    setTimeout(function () {
                        _this.visible = false;
                        setTimeout(function () {
                            _this.progress = 0;
                        }, _this.animationTime * 1000);
                    }, this.animationTime * 1000);
                };
                return LoadingBar;
            }());
            __decorate([
                core_2.Input(),
                __metadata("design:type", String)
            ], LoadingBar.prototype, "color", void 0);
            __decorate([
                core_2.Input(),
                __metadata("design:type", Number)
            ], LoadingBar.prototype, "height", void 0);
            __decorate([
                core_2.Input(),
                __metadata("design:type", Number)
            ], LoadingBar.prototype, "animationTime", void 0);
            __decorate([
                core_2.Input(),
                __metadata("design:type", Number)
            ], LoadingBar.prototype, "runInterval", void 0);
            __decorate([
                core_2.Input(),
                __metadata("design:type", Number)
            ], LoadingBar.prototype, "progress", void 0);
            __decorate([
                core_2.Input(),
                __metadata("design:type", Boolean)
            ], LoadingBar.prototype, "listenRouterEvents", void 0);
            __decorate([
                core_2.Input(),
                __metadata("design:type", Function)
            ], LoadingBar.prototype, "routerEventsFilter", void 0);
            LoadingBar = __decorate([
                core_2.Component({
                    selector: "loading-bar",
                    template: "\n<div class=\"loading-bar\">\n    <div class=\"loading-bar-progress\" \n        [style.width]=\"progress + '%'\" \n        [style.backgroundColor]=\"color\" \n        [style.color]=\"color\"\n        [style.height]=\"height + 'px'\" \n        [style.opacity]=\"visible ? 1 : 0\"\n        [style.-webkit-transition]=\"'all ' + animationTime + 's ease-in-out'\"\n        [style.-moz-transition]=\"'all ' + animationTime + 's ease-in-out'\"\n        [style.-o-transition]=\"'all ' + animationTime + 's ease-in-out'\"\n        [style.transition]=\"'all ' + animationTime + 's ease-in-out'\"></div>\n</div>\n",
                    styles: ["\n.loading-bar {\n    position: fixed;\n    margin: 0;\n    padding: 0;\n    top: 0;\n    left: 0;\n    right: 0;\n    z-index: 99999;\n}\n\n.loading-bar-progress {\n    margin: 0;\n    padding: 0;\n    z-index: 99998;\n    box-shadow: 0 0 10px 0;\n    height: 2px;\n    opacity: 0;\n}\n"]
                }),
                __param(0, core_2.Optional()),
                __metadata("design:paramtypes", [LoadingBarService_1.LoadingBarService,
                    router_1.Router])
            ], LoadingBar);
            exports_2("LoadingBar", LoadingBar);
        }
    };
});
System.register("ngx-loading-bar/index", ["@angular/core", "@angular/common", "ngx-loading-bar/LoadingBarService", "ngx-loading-bar/LoadingBar"], function (exports_3, context_3) {
    var __moduleName = context_3 && context_3.id;
    var core_3, common_1, LoadingBarService_2, LoadingBar_1, LoadingBarModule;
    var exportedNames_1 = {
        "LoadingBarModule": true
    };
    function exportStar_1(m) {
        var exports = {};
        for (var n in m) {
            if (n !== "default" && !exportedNames_1.hasOwnProperty(n)) exports[n] = m[n];
        }
        exports_3(exports);
    }
    return {
        setters: [
            function (core_3_1) {
                core_3 = core_3_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
            },
            function (LoadingBarService_2_1) {
                LoadingBarService_2 = LoadingBarService_2_1;
                exportStar_1(LoadingBarService_2_1);
            },
            function (LoadingBar_1_1) {
                LoadingBar_1 = LoadingBar_1_1;
                exportStar_1(LoadingBar_1_1);
            }
        ],
        execute: function () {
            LoadingBarModule = (function () {
                function LoadingBarModule() {
                }
                return LoadingBarModule;
            }());
            LoadingBarModule = __decorate([
                core_3.NgModule({
                    imports: [
                        common_1.CommonModule
                    ],
                    declarations: [
                        LoadingBar_1.LoadingBar,
                    ],
                    exports: [
                        LoadingBar_1.LoadingBar,
                    ],
                    providers: [
                        LoadingBarService_2.LoadingBarService
                    ]
                })
            ], LoadingBarModule);
            exports_3("LoadingBarModule", LoadingBarModule);
        }
    };
});
System.register("ngx-loading-bar", ["ngx-loading-bar/index"], function (exports_4, context_4) {
    var __moduleName = context_4 && context_4.id;
    function exportStar_2(m) {
        var exports = {};
        for (var n in m) {
            if (n !== "default") exports[n] = m[n];
        }
        exports_4(exports);
    }
    return {
        setters: [
            function (index_1_1) {
                exportStar_2(index_1_1);
            }
        ],
        execute: function () {
        }
    };
});
