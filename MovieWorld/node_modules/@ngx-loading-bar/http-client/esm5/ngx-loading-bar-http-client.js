import { __spread } from 'tslib';
import { LoadingBarService, LoadingBarModule } from '@ngx-loading-bar/core';
import { Injectable, NgModule } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';

var LoadingBarInterceptor = /** @class */ (function () {
    function LoadingBarInterceptor(loadingBar) {
        this.loadingBar = loadingBar;
    }
    LoadingBarInterceptor.prototype.intercept = function (req, next) {
        var _this = this;
        if (req.headers.has('ignoreLoadingBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreLoadingBar') }));
        }
        var r = next.handle(req);
        var started = false;
        var responseSubscribe = r.subscribe.bind(r);
        r.subscribe = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            _this.loadingBar.start();
            started = true;
            return responseSubscribe.apply(void 0, __spread(args));
        };
        return r.pipe(finalize(function () { return started && _this.loadingBar.complete(); }));
    };
    return LoadingBarInterceptor;
}());
LoadingBarInterceptor.decorators = [
    { type: Injectable },
];
LoadingBarInterceptor.ctorParameters = function () { return [
    { type: LoadingBarService, },
]; };
var LoadingBarHttpClientModule = /** @class */ (function () {
    function LoadingBarHttpClientModule() {
    }
    return LoadingBarHttpClientModule;
}());
LoadingBarHttpClientModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    HttpClientModule,
                    LoadingBarModule.forRoot(),
                ],
                exports: [
                    HttpClientModule,
                    LoadingBarModule,
                ],
                providers: [
                    { provide: HTTP_INTERCEPTORS, useClass: LoadingBarInterceptor, multi: true },
                ],
            },] },
];

export { LoadingBarHttpClientModule, LoadingBarInterceptor as Éµa };
//# sourceMappingURL=ngx-loading-bar-http-client.js.map
