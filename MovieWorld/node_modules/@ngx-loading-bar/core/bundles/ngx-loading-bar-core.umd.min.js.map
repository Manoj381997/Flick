{
  "version": 3,
  "file": "ngx-loading-bar-core.umd.min.js",
  "sources": [
    "ng://@ngx-loading-bar/core/out/loading-bar.service.ts",
    "ng://@ngx-loading-bar/core/out/loading-bar.component.ts",
    "ng://@ngx-loading-bar/core/out/core.module.ts"
  ],
  "sourcesContent": [
    "import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Injectable()\nexport class LoadingBarService implements OnDestroy {\n  readonly progress$ = (new Subject<number>()).pipe(debounceTime(0)) as Subject<number>;\n\n  private _pendingRequests = 0;\n  private _value = 0;\n  private _incTimeout: any;\n\n  start(initialValue = 2) {\n    ++this._pendingRequests;\n    if (this._value === 0 || this._pendingRequests === 1) {\n      // Inserts the loading bar element into the dom, and sets it to 2%\n      this.set(this._pendingRequests === 1 && this._value > 0 ? this._value : initialValue);\n    }\n  }\n\n  stop() {\n    this.complete();\n    while (this._pendingRequests > 0) {\n      this.complete();\n    }\n  }\n\n  complete() {\n    if (this._pendingRequests === 0 && this._value === 0) {\n      return;\n    }\n\n    if (this._pendingRequests > 0) {\n      --this._pendingRequests;\n    }\n\n    if (this._pendingRequests === 0 || (this._pendingRequests === 0 && this._value > 0)) {\n      if (this._value !== 100) {\n        this.set(100);\n      }\n\n      // Attempt to aggregate any start/complete calls within 500ms:\n      setTimeout(() => this.set(0), 500);\n    }\n  }\n\n  /**\n   * Set the loading bar's width to a certain percent.\n   *\n   * @param n any value between 0 and 100\n   */\n  set(n) {\n    if (n === 0 && this._pendingRequests > 0) {\n      n = 2;\n    }\n\n    this._value = n;\n    this.progress$.next(n);\n\n    if (this._pendingRequests === 0) {\n      return;\n    }\n\n    // increment loadingbar to give the illusion that there is always\n    // progress but make sure to cancel the previous timeouts so we don't\n    // have multiple incs running at the same time.\n    clearTimeout(this._incTimeout);\n    if (this._value > 0 && this._value < 100) {\n      this._incTimeout = setTimeout(() => this.increment(), 250);\n    }\n  }\n\n  /**\n   * Increments the loading bar by a random amount\n   * but slows down as it progresses\n   */\n  increment(rnd = 0) {\n    if (rnd > 0) {\n      this.set(this._value + rnd);\n    }\n\n    const stat = this._value;\n    if (stat >= 0 && stat < 25) {\n      // Start out between 3 - 6% increments\n      rnd = (Math.random() * (5 - 3 + 1) + 3);\n    } else if (stat >= 25 && stat < 65) {\n      // increment between 0 - 3%\n      rnd = (Math.random() * 3);\n    } else if (stat >= 65 && stat < 90) {\n      // increment between 0 - 2%\n      rnd = (Math.random() * 2);\n    } else if (stat >= 90 && stat < 99) {\n      // finally, increment it .5 %\n      rnd = 0.5;\n    } else {\n      // after 99%, don't increment:\n      rnd = 0;\n    }\n\n    this.set(this._value + rnd);\n  }\n\n  ngOnDestroy() {\n    this.progress$.complete();\n  }\n}\n",
    "import { Component, Input, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\nimport { LoadingBarService } from './loading-bar.service';\n\n@Component({\n  selector: 'ngx-loading-bar',\n  template: `\n    <ng-container *ngIf=\"(value !== null ? value : loader.progress$|async) as progress\">\n      <div id=\"loading-bar-spinner\" *ngIf=\"includeSpinner\" [style.color]=\"color\">\n        <div [style.width]=\"diameter\" [style.height]=\"diameter\" class=\"spinner-icon\"></div>\n      </div>\n      <div id=\"loading-bar\" *ngIf=\"includeBar\" [style.color]=\"color\">\n        <div class=\"bar\" [style.background]=\"color\" [style.height]=\"height\" [style.width]=\"progress + '%'\">\n          <div class=\"peg\" [style.height]=\"height\"></div>\n        </div>\n      </div>\n    </ng-container>\n  `,\n  preserveWhitespaces: false,\n  encapsulation: ViewEncapsulation.Emulated,\n  styles: [`:host{position:relative;display:block}:host.loading-bar-fixed>div .bar{position:fixed}:host.loading-bar-fixed>div#loading-bar-spinner{position:fixed;top:10px;left:10px}:host.loading-bar-fixed>div .peg{display:block}:host>div{pointer-events:none;-webkit-transition:350ms linear all;transition:350ms linear all;color:#29d}:host>div .bar{-webkit-transition:width 350ms;transition:width 350ms;background:#29d;position:absolute;z-index:10002;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}:host>div .peg{display:none;position:absolute;width:70px;right:0;top:0;height:2px;opacity:.45;-webkit-box-shadow:1px 0 6px 1px;box-shadow:1px 0 6px 1px;color:inherit;border-radius:100%}:host>div#loading-bar-spinner{display:block;position:absolute;z-index:10002;top:5px;left:0}:host>div#loading-bar-spinner .spinner-icon{width:14px;height:14px;border:2px solid transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;-webkit-animation:.4s linear infinite loading-bar-spinner;animation:.4s linear infinite loading-bar-spinner}@-webkit-keyframes loading-bar-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes loading-bar-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}`],\n  host: {\n    '[class.loading-bar-fixed]': 'fixed',\n  }\n})\nexport class LoadingBarComponent {\n  @Input() includeSpinner = true;\n  @Input() includeBar = true;\n  @Input() fixed = true;\n  @Input() color;\n  @Input() height;\n  @Input() diameter;\n  @Input() value = null;\n\n  constructor(public loader: LoadingBarService) {}\n}\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoadingBarComponent } from './loading-bar.component';\nimport { LoadingBarService } from './loading-bar.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [LoadingBarComponent],\n  exports: [LoadingBarComponent],\n})\nexport class LoadingBarModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: LoadingBarModule,\n      providers: [LoadingBarService],\n    };\n  }\n}\n"
  ],
  "names": [
    "LoadingBarService",
    "this",
    "progress$",
    "Subject",
    "pipe",
    "debounceTime",
    "_pendingRequests",
    "_value",
    "prototype",
    "start",
    "initialValue",
    "set",
    "stop",
    "complete",
    "_this",
    "setTimeout",
    "n",
    "next",
    "clearTimeout",
    "_incTimeout",
    "increment",
    "rnd",
    "stat",
    "Math",
    "random",
    "ngOnDestroy",
    "type",
    "Injectable",
    "LoadingBarComponent",
    "loader",
    "includeSpinner",
    "includeBar",
    "fixed",
    "value",
    "Component",
    "args",
    "selector",
    "template",
    "preserveWhitespaces",
    "encapsulation",
    "ViewEncapsulation",
    "Emulated",
    "styles",
    "host",
    "[class.loading-bar-fixed]",
    "Input",
    "color",
    "height",
    "diameter",
    "LoadingBarModule",
    "forRoot",
    "ngModule",
    "providers",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports"
  ],
  "mappings": "yeAAA,IAAAA,EAAA,wBAMAC,KAAAC,WAAuB,IAAKC,EAAAA,SAAmBC,KAAKC,EAAAA,aAAa,IAEjEJ,KAAAK,iBAA6B,EAC7BL,KAAAM,OAAmB,SAGjBP,EAAFQ,UAAAC,MAAE,SAAMC,QAAR,IAAAA,IAAQA,EAAR,KACMT,KAAKK,iBACa,IAAhBL,KAAKM,QAA0C,IAA1BN,KAAKK,kBAE5BL,KAAKU,IAA8B,IAA1BV,KAAKK,kBAAwC,EAAdL,KAAKM,OAAaN,KAAKM,OAASG,IAI5EV,EAAFQ,UAAAI,KAAE,WAEE,IADAX,KAAKY,WAC0B,EAAxBZ,KAAKK,kBACVL,KAAKY,YAITb,EAAFQ,UAAAK,SAAE,WAAA,IAAFC,EAAAb,KACkC,IAA1BA,KAAKK,kBAA0C,IAAhBL,KAAKM,SAIZ,EAAxBN,KAAKK,oBACLL,KAAKK,kBAGqB,IAA1BL,KAAKK,kBAAqD,IAA1BL,KAAKK,kBAAwC,EAAdL,KAAKM,UAClD,MAAhBN,KAAKM,QACPN,KAAKU,IAAI,KAIXI,WAAW,WAAM,OAAAD,EAAKH,IAAI,IAAI,QASlCX,EAAFQ,UAAAG,IAAE,SAAIK,GAAJ,IAAFF,EAAAb,KACc,IAANe,GAAmC,EAAxBf,KAAKK,mBAClBU,EAAI,GAGNf,KAAKM,OAASS,EACdf,KAAKC,UAAUe,KAAKD,GAEU,IAA1Bf,KAAKK,mBAOTY,aAAajB,KAAKkB,aACA,EAAdlB,KAAKM,QAAcN,KAAKM,OAAS,MACnCN,KAAKkB,YAAcJ,WAAW,WAAM,OAAAD,EAAKM,aAAa,QAQ1DpB,EAAFQ,UAAAY,UAAE,SAAUC,QAAZ,IAAAA,IAAYA,EAAZ,GACc,EAANA,GACFpB,KAAKU,IAAIV,KAAKM,OAASc,GAGzB,IAAMC,EAAOrB,KAAKM,OAGhBc,EAFU,GAARC,GAAaA,EAAO,GAEF,EAAbC,KAAKC,SAAyB,EACpB,IAARF,GAAcA,EAAO,GAEP,EAAhBC,KAAKC,SACK,IAARF,GAAcA,EAAO,GAEP,EAAhBC,KAAKC,SACK,IAARF,GAAcA,EAAO,GAExB,GAGA,EAGRrB,KAAKU,IAAIV,KAAKM,OAASc,IAGzBrB,EAAFQ,UAAAiB,YAAE,WACExB,KAAKC,UAAUW,cAvGnB,iBAIA,CAAAa,KAACC,EAAAA,aCJD,IAAAC,EAiCE,SAAmBC,GAAA5B,KAArB4B,OAAqBA,EARrB5B,KAAA6B,gBAA4B,EAC5B7B,KAAA8B,YAAwB,EACxB9B,KAAA+B,OAAmB,EAInB/B,KAAAgC,MAAmB,oBA5BnB,CAAAP,KAACQ,EAAAA,UAADC,KAAA,CAAW,CACTC,SAAU,kBACVC,SAAU,mkBAYVC,qBAAqB,EACrBC,cAAeC,EAAAA,kBAAkBC,SACjCC,OAAQ,CAAC,w2CACTC,KAAM,CACJC,4BAA6B,gDApBjC,CAAAlB,KAAS1B,uBAwBT8B,eAAA,CAAA,CAAAJ,KAAGmB,EAAAA,QACHd,WAAA,CAAA,CAAAL,KAAGmB,EAAAA,QACHb,MAAA,CAAA,CAAAN,KAAGmB,EAAAA,QACHC,MAAA,CAAA,CAAApB,KAAGmB,EAAAA,QACHE,OAAA,CAAA,CAAArB,KAAGmB,EAAAA,QACHG,SAAA,CAAA,CAAAtB,KAAGmB,EAAAA,QACHZ,MAAA,CAAA,CAAAP,KAAGmB,EAAAA,SC/BH,IAAAI,EAAA,WAAA,SAAAA,YAWSA,EAATC,QAAE,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CAACpD,OAdlB,iBAKA,CAAA0B,KAAC2B,EAAAA,SAADlB,KAAA,CAAU,CACRmB,QAAS,CAACC,EAAAA,cACVC,aAAc,CAAC5B,GACf6B,QAAS,CAAC7B"
}
