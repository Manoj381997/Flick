import { Injectable, Component, Input, ViewEncapsulation, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

var LoadingBarService = /** @class */ (function () {
    function LoadingBarService() {
        this.progress$ = ((new Subject()).pipe(debounceTime(0)));
        this._pendingRequests = 0;
        this._value = 0;
    }
    LoadingBarService.prototype.start = function (initialValue) {
        if (initialValue === void 0) { initialValue = 2; }
        ++this._pendingRequests;
        if (this._value === 0 || this._pendingRequests === 1) {
            this.set(this._pendingRequests === 1 && this._value > 0 ? this._value : initialValue);
        }
    };
    LoadingBarService.prototype.stop = function () {
        this.complete();
        while (this._pendingRequests > 0) {
            this.complete();
        }
    };
    LoadingBarService.prototype.complete = function () {
        var _this = this;
        if (this._pendingRequests === 0 && this._value === 0) {
            return;
        }
        if (this._pendingRequests > 0) {
            --this._pendingRequests;
        }
        if (this._pendingRequests === 0 || (this._pendingRequests === 0 && this._value > 0)) {
            if (this._value !== 100) {
                this.set(100);
            }
            setTimeout(function () { return _this.set(0); }, 500);
        }
    };
    LoadingBarService.prototype.set = function (n) {
        var _this = this;
        if (n === 0 && this._pendingRequests > 0) {
            n = 2;
        }
        this._value = n;
        this.progress$.next(n);
        if (this._pendingRequests === 0) {
            return;
        }
        clearTimeout(this._incTimeout);
        if (this._value > 0 && this._value < 100) {
            this._incTimeout = setTimeout(function () { return _this.increment(); }, 250);
        }
    };
    LoadingBarService.prototype.increment = function (rnd) {
        if (rnd === void 0) { rnd = 0; }
        if (rnd > 0) {
            this.set(this._value + rnd);
        }
        var stat = this._value;
        if (stat >= 0 && stat < 25) {
            rnd = (Math.random() * (5 - 3 + 1) + 3);
        }
        else if (stat >= 25 && stat < 65) {
            rnd = (Math.random() * 3);
        }
        else if (stat >= 65 && stat < 90) {
            rnd = (Math.random() * 2);
        }
        else if (stat >= 90 && stat < 99) {
            rnd = 0.5;
        }
        else {
            rnd = 0;
        }
        this.set(this._value + rnd);
    };
    LoadingBarService.prototype.ngOnDestroy = function () {
        this.progress$.complete();
    };
    return LoadingBarService;
}());
LoadingBarService.decorators = [
    { type: Injectable },
];
var LoadingBarComponent = /** @class */ (function () {
    function LoadingBarComponent(loader) {
        this.loader = loader;
        this.includeSpinner = true;
        this.includeBar = true;
        this.fixed = true;
        this.value = null;
    }
    return LoadingBarComponent;
}());
LoadingBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-loading-bar',
                template: "\n    <ng-container *ngIf=\"(value !== null ? value : loader.progress$|async) as progress\">\n      <div id=\"loading-bar-spinner\" *ngIf=\"includeSpinner\" [style.color]=\"color\">\n        <div [style.width]=\"diameter\" [style.height]=\"diameter\" class=\"spinner-icon\"></div>\n      </div>\n      <div id=\"loading-bar\" *ngIf=\"includeBar\" [style.color]=\"color\">\n        <div class=\"bar\" [style.background]=\"color\" [style.height]=\"height\" [style.width]=\"progress + '%'\">\n          <div class=\"peg\" [style.height]=\"height\"></div>\n        </div>\n      </div>\n    </ng-container>\n  ",
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.Emulated,
                styles: [":host{position:relative;display:block}:host.loading-bar-fixed>div .bar{position:fixed}:host.loading-bar-fixed>div#loading-bar-spinner{position:fixed;top:10px;left:10px}:host.loading-bar-fixed>div .peg{display:block}:host>div{pointer-events:none;-webkit-transition:350ms linear all;transition:350ms linear all;color:#29d}:host>div .bar{-webkit-transition:width 350ms;transition:width 350ms;background:#29d;position:absolute;z-index:10002;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}:host>div .peg{display:none;position:absolute;width:70px;right:0;top:0;height:2px;opacity:.45;-webkit-box-shadow:1px 0 6px 1px;box-shadow:1px 0 6px 1px;color:inherit;border-radius:100%}:host>div#loading-bar-spinner{display:block;position:absolute;z-index:10002;top:5px;left:0}:host>div#loading-bar-spinner .spinner-icon{width:14px;height:14px;border:2px solid transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;-webkit-animation:.4s linear infinite loading-bar-spinner;animation:.4s linear infinite loading-bar-spinner}@-webkit-keyframes loading-bar-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes loading-bar-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}"],
                host: {
                    '[class.loading-bar-fixed]': 'fixed',
                }
            },] },
];
LoadingBarComponent.ctorParameters = function () { return [
    { type: LoadingBarService, },
]; };
LoadingBarComponent.propDecorators = {
    "includeSpinner": [{ type: Input },],
    "includeBar": [{ type: Input },],
    "fixed": [{ type: Input },],
    "color": [{ type: Input },],
    "height": [{ type: Input },],
    "diameter": [{ type: Input },],
    "value": [{ type: Input },],
};
var LoadingBarModule = /** @class */ (function () {
    function LoadingBarModule() {
    }
    LoadingBarModule.forRoot = function () {
        return {
            ngModule: LoadingBarModule,
            providers: [LoadingBarService],
        };
    };
    return LoadingBarModule;
}());
LoadingBarModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [LoadingBarComponent],
                exports: [LoadingBarComponent],
            },] },
];

export { LoadingBarModule, LoadingBarComponent, LoadingBarService };
//# sourceMappingURL=ngx-loading-bar-core.js.map
