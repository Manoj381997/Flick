(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	(factory((global.ng = global.ng || {}, global.ng['progress-bar'] = {}),global.ng.core));
}(this, (function (exports,core) { 'use strict';

/**
 * Generated class for the ProgressBarComponent component.
 *
 * See https://angular.io/docs/ts/latest/api/core/index/ComponentMetadata-class.html
 * for more info on Angular Components.
 */
var ProgressBarComponent = /** @class */ (function () {
    function ProgressBarComponent() {
        // Default color
        this.color = "#488aff";
    }
    /**
     * Returns a color for a certains percent
     * @param percent The current progress
     */
    ProgressBarComponent.prototype.whichColor = function (percent) {
        // Get all entries index as an array
        var k = Object.keys(this.degraded);
        // Convert string to number
        k.forEach(function (e, i) { return k[i] = +e; });
        // Sort them by value
        k = k.sort(function (a, b) { return a - b; });
        // Percent as number
        var p = +percent;
        // Set last by default as the first occurence
        var last = k[0];
        // Foreach keys 
        for (var _i = 0, k_1 = k; _i < k_1.length; _i++) {
            var val = k_1[_i];
            // if current val is < than percent
            if (val < p) {
                last = val;
            }
            // if val >= percent then the val that we could show has been reached
            else if (val >= p - 1) {
                return this.degraded[last];
            }
        }
        // if its the last one retrun the last
        return this.degraded[last];
    };
    ProgressBarComponent.prototype.whichProgress = function (progress) {
        try {
            return Math.round(progress * 100) / 100;
        }
        catch (_a) {
            return progress;
        }
    };
    ProgressBarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'progress-bar',
                    styles: ["\n          .progress-outer {\n            width: 96%;\n            margin: 10px 2%;\n            padding: 3px;\n            text-align: center;\n            background-color: #f4f4f4;\n            border: 1px solid #dcdcdc;\n            color: #fff;\n            border-radius: 20px;\n          }\n          .progress-inner {\n            min-width: 15%;\n            white-space: nowrap;\n            overflow: hidden;\n            padding: 5px;\n            border-radius: 20px;\n          }\n    "],
                    template: "<div class=\"progress-outer\">\n" +
                        "    <div class=\"progress-inner\" [style.width]=\"whichProgress(progress) + '%'\" [style.background-color]=\"degraded == null ? color : whichColor(progress)\">\n" +
                        "        {{whichProgress(progress)}}%\n" +
                        "</div>\n" +
                        "</div>"
                },] },
    ];
    /** @nocollapse */
    ProgressBarComponent.ctorParameters = function () { return []; };
    ProgressBarComponent.propDecorators = {
        'progress': [{ type: core.Input, args: ['progress',] },],
        'color': [{ type: core.Input, args: ['color',] },],
        'degraded': [{ type: core.Input, args: ['color-degraded',] },],
    };
    return ProgressBarComponent;
}());

var ProgressBarModule = /** @class */ (function () {
    function ProgressBarModule() {
    }
    ProgressBarModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [ProgressBarComponent],
                    exports: [ProgressBarComponent],
                    schemas: [core.NO_ERRORS_SCHEMA]
                },] },
    ];
    /** @nocollapse */
    ProgressBarModule.ctorParameters = function () { return []; };
    return ProgressBarModule;
}());

exports.ProgressBarModule = ProgressBarModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
