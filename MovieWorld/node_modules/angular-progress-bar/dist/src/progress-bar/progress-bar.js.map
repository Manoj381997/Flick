{"version":3,"sources":["../../../src/progress-bar/progress-bar.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,KAAA,EAAM,MAAQ,eAAA,CAAgB;AAElD;;;;;GAKG;AAEH;IAQE;QACE,gBAAgB;QAChB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;IACzB,CAAC;IAED;;;OAGG;IACH,yCAAU,GAAV,UAAW,OAAe;QACxB,oCAAoC;QACpC,IAAI,CAAC,GAAe,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/C,2BAA2B;QAC3B,CAAC,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAT,CAAS,CAAC,CAAC;QAC/B,qBAAqB;QACrB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,CAAC,CAAC;QAC5B,oBAAoB;QACpB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAA;QAChB,6CAA6C;QAC7C,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAChB,gBAAgB;QAChB,KAAe,UAAC,EAAD,OAAC,EAAD,eAAC,EAAD,IAAC,EAAC;YAAb,IAAI,GAAG,UAAA;YACT,mCAAmC;YACnC,IAAG,GAAG,GAAG,CAAC,EAAC;gBACT,IAAI,GAAG,GAAG,CAAC;aACZ;YACD,qEAAqE;iBAChE,IAAG,GAAG,IAAI,CAAC,GAAE,CAAC,EAAC;gBAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aAC5B;SACF;QACD,sCAAsC;QACtC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,4CAAa,GAAb,UAAc,QAAgB;QAC5B,IAAG;YACD,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;SACzC;QACD,WAAK;YACH,OAAO,QAAQ,CAAC;SACjB;IACH,CAAC;IACI,+BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACtB,QAAQ,EACJ,cAAc;oBAClB,MAAM,EAAE,CAAC,sfAkBR,CAAC;oBACF,QAAQ,EACJ,kCAAkC;wBAClC,mKAAmK;wBACnK,wCAAwC;wBACxC,UAAU;wBACV,QAAQ;iBAGf,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,mCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,mCAAc,GAA2C;QAChE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,UAAU,EAAG,EAAE,EAAE;QACpD,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,OAAO,EAAG,EAAE,EAAE;QAC9C,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAG,EAAE,EAAE;KACzD,CAAC;IACF,2BAAC;CA5FD,AA4FC,IAAA;SA5FY,oBAAoB","file":"progress-bar.js","sourceRoot":"","sourcesContent":["import { Component, Input  } from '@angular/core';\n\n/**\n * Generated class for the ProgressBarComponent component.\n *\n * See https://angular.io/docs/ts/latest/api/core/index/ComponentMetadata-class.html\n * for more info on Angular Components.\n */\n\nexport class ProgressBarComponent {\n\n  /** Inputs **/\n     progress: string;\n     color: string;\n     degraded: any;\n\n\n  constructor() {\n    // Default color\n    this.color = \"#488aff\";\n  }\n\n  /**\n   * Returns a color for a certains percent\n   * @param percent The current progress\n   */\n  whichColor(percent: string){\n    // Get all entries index as an array\n    let k: Array<any> = Object.keys(this.degraded);\n    // Convert string to number\n    k.forEach((e, i) => k[i] = +e);\n    // Sort them by value\n    k = k.sort((a, b) => a - b);\n    // Percent as number\n    let p = +percent\n    // Set last by default as the first occurence\n    let last = k[0];\n    // Foreach keys \n    for(let val of k){\n      // if current val is < than percent\n      if(val < p){\n        last = val;\n      }\n      // if val >= percent then the val that we could show has been reached\n      else if(val >= p -1){\n        return this.degraded[last];\n      }\n    }\n    // if its the last one retrun the last\n    return this.degraded[last];\n  }\n\n  whichProgress(progress: number){\n    try{\n      return Math.round(progress * 100) / 100;\n    }\n    catch{\n      return progress;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:\n        'progress-bar',\n    styles: [`\n          .progress-outer {\n            width: 96%;\n            margin: 10px 2%;\n            padding: 3px;\n            text-align: center;\n            background-color: #f4f4f4;\n            border: 1px solid #dcdcdc;\n            color: #fff;\n            border-radius: 20px;\n          }\n          .progress-inner {\n            min-width: 15%;\n            white-space: nowrap;\n            overflow: hidden;\n            padding: 5px;\n            border-radius: 20px;\n          }\n    `],\n    template:\n        \"<div class=\\\"progress-outer\\\">\\n\" +\n        \"    <div class=\\\"progress-inner\\\" [style.width]=\\\"whichProgress(progress) + '%'\\\" [style.background-color]=\\\"degraded == null ? color : whichColor(progress)\\\">\\n\" +\n        \"        {{whichProgress(progress)}}%\\n\" +\n        \"</div>\\n\" +\n        \"</div>\"\n\n\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'progress': [{ type: Input, args: ['progress', ] },],\n'color': [{ type: Input, args: ['color', ] },],\n'degraded': [{ type: Input, args: ['color-degraded', ] },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}