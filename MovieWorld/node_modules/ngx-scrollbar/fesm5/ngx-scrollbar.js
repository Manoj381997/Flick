import { Component, Inject, Input, Output, ViewChild, ChangeDetectionStrategy, EventEmitter, Renderer2, ViewEncapsulation, NgZone, NgModule } from '@angular/core';
import { DOCUMENT, CommonModule } from '@angular/common';
import { fromEvent, of, EMPTY } from 'rxjs';
import { delay, expand, map, mergeMap, takeUntil, takeWhile, tap } from 'rxjs/operators';
import { ObserversModule } from '@angular/cdk/observers';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ScrollbarComponent = /** @class */ (function () {
    function ScrollbarComponent(zone, renderer, document) {
        this.zone = zone;
        this.renderer = renderer;
        this.document = document;
        this._thumbSizeY = 0;
        this._thumbSizeX = 0;
        this._trackTopMax = 0;
        this._trackLeftMax = 0;
        this._scrollLeftMax = 0;
        this._scrollTopMax = 0;
        this._naturalThumbSizeY = 0;
        this._naturalThumbSizeX = 0;
        this._currXPos = 0;
        this._currYPos = 0;
        this._minThumbSize = 20;
        this.autoUpdate = true;
        this.autoHide = false;
        this.trackX = false;
        this.trackY = true;
        this.scrollState = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ScrollbarComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            _this.barX = _this.barXRef.nativeElement;
            _this.barY = _this.barYRef.nativeElement;
            _this.thumbX = _this.thumbXRef.nativeElement;
            _this.thumbY = _this.thumbYRef.nativeElement;
            _this.view = _this.viewRef.nativeElement;
            _this.hideNativeScrollbars();
            /** Initialize scrollbars */
            /** Initialize scrollbars */
            _this.scrollWorker(null);
            _this._scrollSub$ = fromEvent(_this.view, 'scroll').pipe(tap(function (e) { return _this.scrollWorker(e); })).subscribe();
            if (_this.trackX) {
                _this._barXSub$ = fromEvent(_this.barX, 'mousedown').pipe(tap(function (e) { return _this.barXWorker(e); })).subscribe();
                _this._thumbXSub$ = _this.startThumbXWorker();
            }
            if (_this.trackY) {
                _this._barYSub$ = fromEvent(_this.barY, 'mousedown').pipe(tap(function (e) { return _this.barYWorker(e); })).subscribe();
                _this._thumbYSub$ = _this.startThumbYWorker();
            }
        });
    };
    /**
     * @return {?}
     */
    ScrollbarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._scrollSub$) {
            this._scrollSub$.unsubscribe();
        }
        if (this.trackX) {
            this._barXSub$.unsubscribe();
            this._thumbXSub$.unsubscribe();
        }
        if (this.trackY) {
            this._barYSub$.unsubscribe();
            this._thumbYSub$.unsubscribe();
        }
    };
    /**
     * Scroll horizontally
     * @param to
     * @param duration
     */
    /**
     * Scroll horizontally
     * @param {?} to
     * @param {?=} duration
     * @return {?}
     */
    ScrollbarComponent.prototype.scrollXTo = /**
     * Scroll horizontally
     * @param {?} to
     * @param {?=} duration
     * @return {?}
     */
    function (to, duration) {
        var _this = this;
        if (duration) {
            of(duration).pipe(takeWhile(function () { return duration > 0; }), expand(function (d) {
                if (d > 0) {
                    var /** @type {?} */ difference = to - _this.view.scrollLeft;
                    var /** @type {?} */ perTick = difference / d * 10;
                    _this.renderer.setProperty(_this.view, 'scrollLeft', _this.view.scrollLeft + perTick);
                    return of(d - 10).pipe(delay(10));
                }
                else {
                    duration = d;
                    return EMPTY;
                }
            })).subscribe();
        }
        else {
            this.renderer.setProperty(this.view, 'scrollLeft', to);
        }
    };
    /**
     * Scroll vertically
     * @param to
     * @param duration
     */
    /**
     * Scroll vertically
     * @param {?} to
     * @param {?=} duration
     * @return {?}
     */
    ScrollbarComponent.prototype.scrollYTo = /**
     * Scroll vertically
     * @param {?} to
     * @param {?=} duration
     * @return {?}
     */
    function (to, duration) {
        var _this = this;
        if (duration) {
            of(duration).pipe(takeWhile(function () { return duration > 0; }), expand(function (d) {
                if (d > 0) {
                    var /** @type {?} */ difference = to - _this.view.scrollTop;
                    var /** @type {?} */ perTick = difference / d * 10;
                    _this.renderer.setProperty(_this.view, 'scrollTop', _this.view.scrollTop + perTick);
                    return of(d - 10).pipe(delay(10));
                }
                else {
                    duration = d;
                    return EMPTY;
                }
            })).subscribe();
        }
        else {
            this.renderer.setProperty(this.view, 'scrollTop', to);
        }
    };
    /**
     * Scroll view to top
     * @param duration
     */
    /**
     * Scroll view to top
     * @param {?=} duration
     * @return {?}
     */
    ScrollbarComponent.prototype.scrollToTop = /**
     * Scroll view to top
     * @param {?=} duration
     * @return {?}
     */
    function (duration) {
        this.scrollYTo(0, duration);
    };
    /**
     * Scroll view to bottom
     * @param duration
     */
    /**
     * Scroll view to bottom
     * @param {?=} duration
     * @return {?}
     */
    ScrollbarComponent.prototype.scrollToBottom = /**
     * Scroll view to bottom
     * @param {?=} duration
     * @return {?}
     */
    function (duration) {
        this.scrollYTo(this.view.scrollHeight, duration);
    };
    /**
     * Scroll view to max right
     * @param duration
     */
    /**
     * Scroll view to max right
     * @param {?=} duration
     * @return {?}
     */
    ScrollbarComponent.prototype.scrollToRight = /**
     * Scroll view to max right
     * @param {?=} duration
     * @return {?}
     */
    function (duration) {
        this.scrollXTo(this.view.scrollWidth, duration);
    };
    /**
     * Scroll view to max left
     * @param duration
     */
    /**
     * Scroll view to max left
     * @param {?=} duration
     * @return {?}
     */
    ScrollbarComponent.prototype.scrollToLeft = /**
     * Scroll view to max left
     * @param {?=} duration
     * @return {?}
     */
    function (duration) {
        this.scrollXTo(0, duration);
    };
    /**
     * Update thumbnails
     */
    /**
     * Update thumbnails
     * @return {?}
     */
    ScrollbarComponent.prototype.update = /**
     * Update thumbnails
     * @return {?}
     */
    function () {
        this.setThumbXPosition(this._currXPos, this.calculateThumbXSize());
        this.setThumbYPosition(this._currYPos, this.calculateThumbYSize());
    };
    /**
     * Scroll Worker
     * @param {?} e - Mouse Event
     * @return {?}
     */
    ScrollbarComponent.prototype.scrollWorker = /**
     * Scroll Worker
     * @param {?} e - Mouse Event
     * @return {?}
     */
    function (e) {
        this._thumbSizeX = this.thumbX.clientWidth;
        this._thumbSizeY = this.thumbY.clientHeight;
        this._trackLeftMax = this.barX.clientWidth - this._thumbSizeX;
        this._trackTopMax = this.barY.clientHeight - this._thumbSizeY;
        var /** @type {?} */ thumbXPosition = this.view.scrollLeft * this._trackLeftMax / this._scrollLeftMax;
        var /** @type {?} */ thumbYPosition = this.view.scrollTop * this._trackTopMax / this._scrollTopMax;
        this.setThumbXPosition(thumbXPosition, this.calculateThumbXSize());
        this.setThumbYPosition(thumbYPosition, this.calculateThumbYSize());
        /** Emit scroll state */
        this.scrollState.emit(e);
    };
    /**
     * Horizontal scrollbar click worker
     * @param {?} e - Mouse Event
     * @return {?}
     */
    ScrollbarComponent.prototype.barXWorker = /**
     * Horizontal scrollbar click worker
     * @param {?} e - Mouse Event
     * @return {?}
     */
    function (e) {
        if (e.target === e.currentTarget) {
            var /** @type {?} */ offset = e.offsetX - this._naturalThumbSizeX * .5;
            var /** @type {?} */ thumbPositionPercentage = offset * 100 / this.barX.clientWidth;
            var /** @type {?} */ scrollLeft = thumbPositionPercentage * this.view.scrollWidth / 100;
            this.renderer.setProperty(this.view, 'scrollLeft', scrollLeft);
        }
    };
    /**
     * Vertical scrollbar click worker
     * @param {?} e - Mouse Event
     * @return {?}
     */
    ScrollbarComponent.prototype.barYWorker = /**
     * Vertical scrollbar click worker
     * @param {?} e - Mouse Event
     * @return {?}
     */
    function (e) {
        if (e.target === e.currentTarget) {
            var /** @type {?} */ offset = e.offsetY - this._naturalThumbSizeY * .5;
            var /** @type {?} */ thumbPositionPercentage = offset * 100 / this.barY.clientHeight;
            var /** @type {?} */ scrollTop = thumbPositionPercentage * this.view.scrollHeight / 100;
            this.renderer.setProperty(this.view, 'scrollTop', scrollTop);
        }
    };
    /**
     * Start horizontal thumb worker
     * @return {?}
     */
    ScrollbarComponent.prototype.startThumbXWorker = /**
     * Start horizontal thumb worker
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ mousedown$ = fromEvent(this.thumbX, 'mousedown');
        var /** @type {?} */ mouseup$ = fromEvent(this.document, 'mouseup');
        var /** @type {?} */ mousemove$ = fromEvent(this.document, 'mousemove');
        return mousedown$.pipe(tap(function () { return _this.document.onselectstart = function () { return false; }; }), map(function (mousedownEvent) { return mousedownEvent.offsetX; }), mergeMap(function (mousedownOffsetX) {
            return mousemove$.pipe(takeUntil(mouseup$.pipe(tap(function () { return _this.document.onselectstart = null; }))), map(function (mousemoveEvent) { return mousemoveEvent.clientX; }), tap(function (mousemoveClientX) {
                var /** @type {?} */ offset = mousemoveClientX - _this.barX.getBoundingClientRect().left;
                var /** @type {?} */ scroll = _this._scrollLeftMax * (offset - mousedownOffsetX) / _this._trackLeftMax;
                _this.renderer.setProperty(_this.view, 'scrollLeft', scroll);
            }));
        })).subscribe();
    };
    /**
     * Start vertical thumb worker
     * @return {?}
     */
    ScrollbarComponent.prototype.startThumbYWorker = /**
     * Start vertical thumb worker
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ mousedown$ = fromEvent(this.thumbY, 'mousedown');
        var /** @type {?} */ mouseup$ = fromEvent(this.document, 'mouseup');
        var /** @type {?} */ mousemove$ = fromEvent(this.document, 'mousemove');
        return mousedown$.pipe(tap(function () { return _this.document.onselectstart = function () { return false; }; }), map(function (mousedownEvent) { return mousedownEvent.offsetY; }), mergeMap(function (mousedownOffsetY) {
            return mousemove$.pipe(takeUntil(mouseup$.pipe(tap(function () { return _this.document.onselectstart = null; }))), map(function (mousemoveEvent) { return mousemoveEvent.clientY; }), tap(function (mousemoveClientY) {
                var /** @type {?} */ offset = mousemoveClientY - _this.barY.getBoundingClientRect().top;
                var /** @type {?} */ scroll = _this._scrollTopMax * (offset - mousedownOffsetY) / _this._trackTopMax;
                _this.renderer.setProperty(_this.view, 'scrollTop', scroll);
            }));
        })).subscribe();
    };
    /**
     * Calculate Thumb X Size
     * @return {?}
     */
    ScrollbarComponent.prototype.calculateThumbXSize = /**
     * Calculate Thumb X Size
     * @return {?}
     */
    function () {
        this._naturalThumbSizeX = this.barX.clientWidth / this.view.scrollWidth * this.barX.clientWidth;
        this._scrollLeftMax = this.view.scrollWidth - this.view.clientWidth;
        return this.scrollBoundaries(this._naturalThumbSizeX, this._scrollLeftMax);
    };
    /**
     * Calculate Thumb Y Size
     * @return {?}
     */
    ScrollbarComponent.prototype.calculateThumbYSize = /**
     * Calculate Thumb Y Size
     * @return {?}
     */
    function () {
        this._naturalThumbSizeY = this.barY.clientHeight / this.view.scrollHeight * this.barY.clientHeight;
        this._scrollTopMax = this.view.scrollHeight - this.view.clientHeight;
        return this.scrollBoundaries(this._naturalThumbSizeY, this._scrollTopMax);
    };
    /**
     * Get scrollbar thumb size
     * @param {?} naturalThumbSize
     * @param {?} scrollMax
     * @return {?}
     */
    ScrollbarComponent.prototype.scrollBoundaries = /**
     * Get scrollbar thumb size
     * @param {?} naturalThumbSize
     * @param {?} scrollMax
     * @return {?}
     */
    function (naturalThumbSize, scrollMax) {
        return (naturalThumbSize < this._minThumbSize) ? this._minThumbSize : scrollMax ? naturalThumbSize : 0;
    };
    /**
     * Set horizontal scrollbar thumb style
     * @param {?} x
     * @param {?} width
     * @return {?}
     */
    ScrollbarComponent.prototype.setThumbXPosition = /**
     * Set horizontal scrollbar thumb style
     * @param {?} x
     * @param {?} width
     * @return {?}
     */
    function (x, width) {
        var /** @type {?} */ transform = "translate3d(" + x + "px, 0, 0)";
        this.renderer.setStyle(this.thumbX, 'transform', transform);
        this.renderer.setStyle(this.thumbX, 'width', width + 'px');
        this._currXPos = x;
    };
    /**
     * Set vertical scrollbar thumb style
     * @param {?} y
     * @param {?} height
     * @return {?}
     */
    ScrollbarComponent.prototype.setThumbYPosition = /**
     * Set vertical scrollbar thumb style
     * @param {?} y
     * @param {?} height
     * @return {?}
     */
    function (y, height) {
        var /** @type {?} */ transform = "translate3d(0, " + y + "px, 0)";
        this.renderer.setStyle(this.thumbY, 'transform', transform);
        this.renderer.setStyle(this.thumbY, 'height', height + 'px');
        this._currYPos = y;
    };
    /**
     * Hide native scrollbars
     * @return {?}
     */
    ScrollbarComponent.prototype.hideNativeScrollbars = /**
     * Hide native scrollbars
     * @return {?}
     */
    function () {
        var /** @type {?} */ size = "calc(100% + " + this.getNativeScrollbarWidth() + "px)";
        this.renderer.setStyle(this.view, 'width', size);
        this.renderer.setStyle(this.view, 'height', size);
    };
    /**
     * Get the native scrollbar width
     * @return {?}
     */
    ScrollbarComponent.prototype.getNativeScrollbarWidth = /**
     * Get the native scrollbar width
     * @return {?}
     */
    function () {
        var /** @type {?} */ element = this.document.createElement('div');
        element.style.position = 'absolute';
        element.style.top = '-9999px';
        element.style.width = '100px';
        element.style.height = '100px';
        element.style.overflow = 'scroll';
        element.style.msOverflowStyle = 'scrollbar';
        this.document.body.appendChild(element);
        var /** @type {?} */ sw = element.offsetWidth - element.clientWidth;
        this.document.body.removeChild(element);
        return sw;
    };
    ScrollbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-scrollbar',
                    template: "<div class=\"ng-scrollbar-container\" [class.ng-scrollbar-autohide]=\"autoHide\">\n\n  <div #barX class=\"ng-scrollbar -horizontal {{barClass}}\" [class.ng-scrollbar-disabled]=\"!trackX\">\n    <div #thumbX class=\"ng-scrollbar-thumb {{thumbClass}}\"></div>\n  </div>\n\n  <div #barY class=\"ng-scrollbar -vertical {{barClass}}\" [class.ng-scrollbar-disabled]=\"!trackY\">\n    <div #thumbY class=\"ng-scrollbar-thumb {{thumbClass}}\"></div>\n  </div>\n\n  <div #view class=\"ng-scrollbar-view {{viewClass}}\"\n       (cdkObserveContent)=\"update()\"\n       [cdkObserveContentDisabled]=\"autoUpdate\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                    styles: ["ng-scrollbar{display:block;position:relative;height:100%;overflow:hidden!important}.ng-scrollbar-container{position:relative;overflow:hidden!important;width:100%;height:100%}.ng-scrollbar-autohide>.ng-scrollbar{opacity:0;transition:opacity 120ms ease-out}.ng-scrollbar-autohide:active>.ng-scrollbar,.ng-scrollbar-autohide:focus>.ng-scrollbar,.ng-scrollbar-autohide:hover>.ng-scrollbar{opacity:1;transition:opacity 340ms ease-out}.ng-scrollbar{position:absolute;right:2px;bottom:2px;z-index:1;border-radius:3px}.-vertical{width:6px;top:2px}.-vertical .ng-scrollbar-thumb{width:100%}.-horizontal{height:6px;left:2px}.-horizontal .ng-scrollbar-thumb{height:100%}.ng-scrollbar-disabled{display:none}.ng-scrollbar-thumb{position:relative;display:block;width:0;height:0;border-radius:inherit;background-color:rgba(0,0,0,.2);-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}.ng-scrollbar-thumb:active,.ng-scrollbar-thumb:hover{background-color:rgba(0,0,0,.3)}.ng-scrollbar-view{width:100%;height:100%;overflow:scroll;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);-webkit-overflow-scrolling:touch}"],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    preserveWhitespaces: false
                },] },
    ];
    /** @nocollapse */
    ScrollbarComponent.ctorParameters = function () { return [
        { type: NgZone, },
        { type: Renderer2, },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    ]; };
    ScrollbarComponent.propDecorators = {
        "barXRef": [{ type: ViewChild, args: ['barX',] },],
        "barYRef": [{ type: ViewChild, args: ['barY',] },],
        "thumbXRef": [{ type: ViewChild, args: ['thumbX',] },],
        "thumbYRef": [{ type: ViewChild, args: ['thumbY',] },],
        "viewRef": [{ type: ViewChild, args: ['view',] },],
        "autoUpdate": [{ type: Input },],
        "autoHide": [{ type: Input },],
        "trackX": [{ type: Input },],
        "trackY": [{ type: Input },],
        "viewClass": [{ type: Input },],
        "barClass": [{ type: Input },],
        "thumbClass": [{ type: Input },],
        "scrollState": [{ type: Output },],
    };
    return ScrollbarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ScrollbarModule = /** @class */ (function () {
    function ScrollbarModule() {
    }
    ScrollbarModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        ObserversModule
                    ],
                    declarations: [ScrollbarComponent],
                    exports: [ScrollbarComponent]
                },] },
    ];
    return ScrollbarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { ScrollbarModule, ScrollbarComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,