/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Inject, Input, Output, ViewChild, ChangeDetectionStrategy, EventEmitter, Renderer2, ViewEncapsulation, NgZone } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { fromEvent, of, EMPTY } from 'rxjs';
import { delay, expand, map, mergeMap, takeUntil, takeWhile, tap } from 'rxjs/operators';
export class ScrollbarComponent {
    /**
     * @param {?} zone
     * @param {?} renderer
     * @param {?} document
     */
    constructor(zone, renderer, document) {
        this.zone = zone;
        this.renderer = renderer;
        this.document = document;
        this._thumbSizeY = 0;
        this._thumbSizeX = 0;
        this._trackTopMax = 0;
        this._trackLeftMax = 0;
        this._scrollLeftMax = 0;
        this._scrollTopMax = 0;
        this._naturalThumbSizeY = 0;
        this._naturalThumbSizeX = 0;
        this._currXPos = 0;
        this._currYPos = 0;
        this._minThumbSize = 20;
        this.autoUpdate = true;
        this.autoHide = false;
        this.trackX = false;
        this.trackY = true;
        this.scrollState = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.zone.runOutsideAngular(() => {
            this.barX = this.barXRef.nativeElement;
            this.barY = this.barYRef.nativeElement;
            this.thumbX = this.thumbXRef.nativeElement;
            this.thumbY = this.thumbYRef.nativeElement;
            this.view = this.viewRef.nativeElement;
            this.hideNativeScrollbars();
            /** Initialize scrollbars */
            this.scrollWorker(null);
            this._scrollSub$ = fromEvent(this.view, 'scroll').pipe(tap((e) => this.scrollWorker(e))).subscribe();
            if (this.trackX) {
                this._barXSub$ = fromEvent(this.barX, 'mousedown').pipe(tap((e) => this.barXWorker(e))).subscribe();
                this._thumbXSub$ = this.startThumbXWorker();
            }
            if (this.trackY) {
                this._barYSub$ = fromEvent(this.barY, 'mousedown').pipe(tap((e) => this.barYWorker(e))).subscribe();
                this._thumbYSub$ = this.startThumbYWorker();
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._scrollSub$) {
            this._scrollSub$.unsubscribe();
        }
        if (this.trackX) {
            this._barXSub$.unsubscribe();
            this._thumbXSub$.unsubscribe();
        }
        if (this.trackY) {
            this._barYSub$.unsubscribe();
            this._thumbYSub$.unsubscribe();
        }
    }
    /**
     * Scroll horizontally
     * @param {?} to
     * @param {?=} duration
     * @return {?}
     */
    scrollXTo(to, duration) {
        if (duration) {
            of(duration).pipe(takeWhile(() => duration > 0), expand((d) => {
                if (d > 0) {
                    const /** @type {?} */ difference = to - this.view.scrollLeft;
                    const /** @type {?} */ perTick = difference / d * 10;
                    this.renderer.setProperty(this.view, 'scrollLeft', this.view.scrollLeft + perTick);
                    return of(d - 10).pipe(delay(10));
                }
                else {
                    duration = d;
                    return EMPTY;
                }
            })).subscribe();
        }
        else {
            this.renderer.setProperty(this.view, 'scrollLeft', to);
        }
    }
    /**
     * Scroll vertically
     * @param {?} to
     * @param {?=} duration
     * @return {?}
     */
    scrollYTo(to, duration) {
        if (duration) {
            of(duration).pipe(takeWhile(() => duration > 0), expand((d) => {
                if (d > 0) {
                    const /** @type {?} */ difference = to - this.view.scrollTop;
                    const /** @type {?} */ perTick = difference / d * 10;
                    this.renderer.setProperty(this.view, 'scrollTop', this.view.scrollTop + perTick);
                    return of(d - 10).pipe(delay(10));
                }
                else {
                    duration = d;
                    return EMPTY;
                }
            })).subscribe();
        }
        else {
            this.renderer.setProperty(this.view, 'scrollTop', to);
        }
    }
    /**
     * Scroll view to top
     * @param {?=} duration
     * @return {?}
     */
    scrollToTop(duration) {
        this.scrollYTo(0, duration);
    }
    /**
     * Scroll view to bottom
     * @param {?=} duration
     * @return {?}
     */
    scrollToBottom(duration) {
        this.scrollYTo(this.view.scrollHeight, duration);
    }
    /**
     * Scroll view to max right
     * @param {?=} duration
     * @return {?}
     */
    scrollToRight(duration) {
        this.scrollXTo(this.view.scrollWidth, duration);
    }
    /**
     * Scroll view to max left
     * @param {?=} duration
     * @return {?}
     */
    scrollToLeft(duration) {
        this.scrollXTo(0, duration);
    }
    /**
     * Update thumbnails
     * @return {?}
     */
    update() {
        this.setThumbXPosition(this._currXPos, this.calculateThumbXSize());
        this.setThumbYPosition(this._currYPos, this.calculateThumbYSize());
    }
    /**
     * Scroll Worker
     * @param {?} e - Mouse Event
     * @return {?}
     */
    scrollWorker(e) {
        this._thumbSizeX = this.thumbX.clientWidth;
        this._thumbSizeY = this.thumbY.clientHeight;
        this._trackLeftMax = this.barX.clientWidth - this._thumbSizeX;
        this._trackTopMax = this.barY.clientHeight - this._thumbSizeY;
        const /** @type {?} */ thumbXPosition = this.view.scrollLeft * this._trackLeftMax / this._scrollLeftMax;
        const /** @type {?} */ thumbYPosition = this.view.scrollTop * this._trackTopMax / this._scrollTopMax;
        this.setThumbXPosition(thumbXPosition, this.calculateThumbXSize());
        this.setThumbYPosition(thumbYPosition, this.calculateThumbYSize());
        /** Emit scroll state */
        this.scrollState.emit(e);
    }
    /**
     * Horizontal scrollbar click worker
     * @param {?} e - Mouse Event
     * @return {?}
     */
    barXWorker(e) {
        if (e.target === e.currentTarget) {
            const /** @type {?} */ offset = e.offsetX - this._naturalThumbSizeX * .5;
            const /** @type {?} */ thumbPositionPercentage = offset * 100 / this.barX.clientWidth;
            const /** @type {?} */ scrollLeft = thumbPositionPercentage * this.view.scrollWidth / 100;
            this.renderer.setProperty(this.view, 'scrollLeft', scrollLeft);
        }
    }
    /**
     * Vertical scrollbar click worker
     * @param {?} e - Mouse Event
     * @return {?}
     */
    barYWorker(e) {
        if (e.target === e.currentTarget) {
            const /** @type {?} */ offset = e.offsetY - this._naturalThumbSizeY * .5;
            const /** @type {?} */ thumbPositionPercentage = offset * 100 / this.barY.clientHeight;
            const /** @type {?} */ scrollTop = thumbPositionPercentage * this.view.scrollHeight / 100;
            this.renderer.setProperty(this.view, 'scrollTop', scrollTop);
        }
    }
    /**
     * Start horizontal thumb worker
     * @return {?}
     */
    startThumbXWorker() {
        const /** @type {?} */ mousedown$ = fromEvent(this.thumbX, 'mousedown');
        const /** @type {?} */ mouseup$ = fromEvent(this.document, 'mouseup');
        const /** @type {?} */ mousemove$ = fromEvent(this.document, 'mousemove');
        return mousedown$.pipe(tap(() => this.document.onselectstart = () => false), map((mousedownEvent) => mousedownEvent.offsetX), mergeMap((mousedownOffsetX) => mousemove$.pipe(takeUntil(mouseup$.pipe(tap(() => this.document.onselectstart = null))), map((mousemoveEvent) => mousemoveEvent.clientX), tap((mousemoveClientX) => {
            const /** @type {?} */ offset = mousemoveClientX - this.barX.getBoundingClientRect().left;
            const /** @type {?} */ scroll = this._scrollLeftMax * (offset - mousedownOffsetX) / this._trackLeftMax;
            this.renderer.setProperty(this.view, 'scrollLeft', scroll);
        })))).subscribe();
    }
    /**
     * Start vertical thumb worker
     * @return {?}
     */
    startThumbYWorker() {
        const /** @type {?} */ mousedown$ = fromEvent(this.thumbY, 'mousedown');
        const /** @type {?} */ mouseup$ = fromEvent(this.document, 'mouseup');
        const /** @type {?} */ mousemove$ = fromEvent(this.document, 'mousemove');
        return mousedown$.pipe(tap(() => this.document.onselectstart = () => false), map((mousedownEvent) => mousedownEvent.offsetY), mergeMap((mousedownOffsetY) => mousemove$.pipe(takeUntil(mouseup$.pipe(tap(() => this.document.onselectstart = null))), map((mousemoveEvent) => mousemoveEvent.clientY), tap((mousemoveClientY) => {
            const /** @type {?} */ offset = mousemoveClientY - this.barY.getBoundingClientRect().top;
            const /** @type {?} */ scroll = this._scrollTopMax * (offset - mousedownOffsetY) / this._trackTopMax;
            this.renderer.setProperty(this.view, 'scrollTop', scroll);
        })))).subscribe();
    }
    /**
     * Calculate Thumb X Size
     * @return {?}
     */
    calculateThumbXSize() {
        this._naturalThumbSizeX = this.barX.clientWidth / this.view.scrollWidth * this.barX.clientWidth;
        this._scrollLeftMax = this.view.scrollWidth - this.view.clientWidth;
        return this.scrollBoundaries(this._naturalThumbSizeX, this._scrollLeftMax);
    }
    /**
     * Calculate Thumb Y Size
     * @return {?}
     */
    calculateThumbYSize() {
        this._naturalThumbSizeY = this.barY.clientHeight / this.view.scrollHeight * this.barY.clientHeight;
        this._scrollTopMax = this.view.scrollHeight - this.view.clientHeight;
        return this.scrollBoundaries(this._naturalThumbSizeY, this._scrollTopMax);
    }
    /**
     * Get scrollbar thumb size
     * @param {?} naturalThumbSize
     * @param {?} scrollMax
     * @return {?}
     */
    scrollBoundaries(naturalThumbSize, scrollMax) {
        return (naturalThumbSize < this._minThumbSize) ? this._minThumbSize : scrollMax ? naturalThumbSize : 0;
    }
    /**
     * Set horizontal scrollbar thumb style
     * @param {?} x
     * @param {?} width
     * @return {?}
     */
    setThumbXPosition(x, width) {
        const /** @type {?} */ transform = `translate3d(${x}px, 0, 0)`;
        this.renderer.setStyle(this.thumbX, 'transform', transform);
        this.renderer.setStyle(this.thumbX, 'width', width + 'px');
        this._currXPos = x;
    }
    /**
     * Set vertical scrollbar thumb style
     * @param {?} y
     * @param {?} height
     * @return {?}
     */
    setThumbYPosition(y, height) {
        const /** @type {?} */ transform = `translate3d(0, ${y}px, 0)`;
        this.renderer.setStyle(this.thumbY, 'transform', transform);
        this.renderer.setStyle(this.thumbY, 'height', height + 'px');
        this._currYPos = y;
    }
    /**
     * Hide native scrollbars
     * @return {?}
     */
    hideNativeScrollbars() {
        const /** @type {?} */ size = `calc(100% + ${this.getNativeScrollbarWidth()}px)`;
        this.renderer.setStyle(this.view, 'width', size);
        this.renderer.setStyle(this.view, 'height', size);
    }
    /**
     * Get the native scrollbar width
     * @return {?}
     */
    getNativeScrollbarWidth() {
        const /** @type {?} */ element = this.document.createElement('div');
        element.style.position = 'absolute';
        element.style.top = '-9999px';
        element.style.width = '100px';
        element.style.height = '100px';
        element.style.overflow = 'scroll';
        element.style.msOverflowStyle = 'scrollbar';
        this.document.body.appendChild(element);
        const /** @type {?} */ sw = element.offsetWidth - element.clientWidth;
        this.document.body.removeChild(element);
        return sw;
    }
}
ScrollbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-scrollbar',
                template: `<div class="ng-scrollbar-container" [class.ng-scrollbar-autohide]="autoHide">

  <div #barX class="ng-scrollbar -horizontal {{barClass}}" [class.ng-scrollbar-disabled]="!trackX">
    <div #thumbX class="ng-scrollbar-thumb {{thumbClass}}"></div>
  </div>

  <div #barY class="ng-scrollbar -vertical {{barClass}}" [class.ng-scrollbar-disabled]="!trackY">
    <div #thumbY class="ng-scrollbar-thumb {{thumbClass}}"></div>
  </div>

  <div #view class="ng-scrollbar-view {{viewClass}}"
       (cdkObserveContent)="update()"
       [cdkObserveContentDisabled]="autoUpdate">
    <ng-content></ng-content>
  </div>
</div>
`,
                styles: [`ng-scrollbar{display:block;position:relative;height:100%;overflow:hidden!important}.ng-scrollbar-container{position:relative;overflow:hidden!important;width:100%;height:100%}.ng-scrollbar-autohide>.ng-scrollbar{opacity:0;transition:opacity 120ms ease-out}.ng-scrollbar-autohide:active>.ng-scrollbar,.ng-scrollbar-autohide:focus>.ng-scrollbar,.ng-scrollbar-autohide:hover>.ng-scrollbar{opacity:1;transition:opacity 340ms ease-out}.ng-scrollbar{position:absolute;right:2px;bottom:2px;z-index:1;border-radius:3px}.-vertical{width:6px;top:2px}.-vertical .ng-scrollbar-thumb{width:100%}.-horizontal{height:6px;left:2px}.-horizontal .ng-scrollbar-thumb{height:100%}.ng-scrollbar-disabled{display:none}.ng-scrollbar-thumb{position:relative;display:block;width:0;height:0;border-radius:inherit;background-color:rgba(0,0,0,.2);-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}.ng-scrollbar-thumb:active,.ng-scrollbar-thumb:hover{background-color:rgba(0,0,0,.3)}.ng-scrollbar-view{width:100%;height:100%;overflow:scroll;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);-webkit-overflow-scrolling:touch}`],
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                preserveWhitespaces: false
            },] },
];
/** @nocollapse */
ScrollbarComponent.ctorParameters = () => [
    { type: NgZone, },
    { type: Renderer2, },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
];
ScrollbarComponent.propDecorators = {
    "barXRef": [{ type: ViewChild, args: ['barX',] },],
    "barYRef": [{ type: ViewChild, args: ['barY',] },],
    "thumbXRef": [{ type: ViewChild, args: ['thumbX',] },],
    "thumbYRef": [{ type: ViewChild, args: ['thumbY',] },],
    "viewRef": [{ type: ViewChild, args: ['view',] },],
    "autoUpdate": [{ type: Input },],
    "autoHide": [{ type: Input },],
    "trackX": [{ type: Input },],
    "trackY": [{ type: Input },],
    "viewClass": [{ type: Input },],
    "barClass": [{ type: Input },],
    "thumbClass": [{ type: Input },],
    "scrollState": [{ type: Output },],
};
function ScrollbarComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ScrollbarComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ScrollbarComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    ScrollbarComponent.propDecorators;
    /** @type {?} */
    ScrollbarComponent.prototype._thumbSizeY;
    /** @type {?} */
    ScrollbarComponent.prototype._thumbSizeX;
    /** @type {?} */
    ScrollbarComponent.prototype._trackTopMax;
    /** @type {?} */
    ScrollbarComponent.prototype._trackLeftMax;
    /** @type {?} */
    ScrollbarComponent.prototype._scrollLeftMax;
    /** @type {?} */
    ScrollbarComponent.prototype._scrollTopMax;
    /** @type {?} */
    ScrollbarComponent.prototype._naturalThumbSizeY;
    /** @type {?} */
    ScrollbarComponent.prototype._naturalThumbSizeX;
    /** @type {?} */
    ScrollbarComponent.prototype._currXPos;
    /** @type {?} */
    ScrollbarComponent.prototype._currYPos;
    /** @type {?} */
    ScrollbarComponent.prototype._minThumbSize;
    /** @type {?} */
    ScrollbarComponent.prototype._scrollSub$;
    /** @type {?} */
    ScrollbarComponent.prototype._barXSub$;
    /** @type {?} */
    ScrollbarComponent.prototype._barYSub$;
    /** @type {?} */
    ScrollbarComponent.prototype._thumbXSub$;
    /** @type {?} */
    ScrollbarComponent.prototype._thumbYSub$;
    /** @type {?} */
    ScrollbarComponent.prototype.barX;
    /** @type {?} */
    ScrollbarComponent.prototype.barY;
    /** @type {?} */
    ScrollbarComponent.prototype.thumbX;
    /** @type {?} */
    ScrollbarComponent.prototype.thumbY;
    /** @type {?} */
    ScrollbarComponent.prototype.view;
    /** @type {?} */
    ScrollbarComponent.prototype.barXRef;
    /** @type {?} */
    ScrollbarComponent.prototype.barYRef;
    /** @type {?} */
    ScrollbarComponent.prototype.thumbXRef;
    /** @type {?} */
    ScrollbarComponent.prototype.thumbYRef;
    /** @type {?} */
    ScrollbarComponent.prototype.viewRef;
    /** @type {?} */
    ScrollbarComponent.prototype.autoUpdate;
    /** @type {?} */
    ScrollbarComponent.prototype.autoHide;
    /** @type {?} */
    ScrollbarComponent.prototype.trackX;
    /** @type {?} */
    ScrollbarComponent.prototype.trackY;
    /** @type {?} */
    ScrollbarComponent.prototype.viewClass;
    /** @type {?} */
    ScrollbarComponent.prototype.barClass;
    /** @type {?} */
    ScrollbarComponent.prototype.thumbClass;
    /** @type {?} */
    ScrollbarComponent.prototype.scrollState;
    /** @type {?} */
    ScrollbarComponent.prototype.zone;
    /** @type {?} */
    ScrollbarComponent.prototype.renderer;
    /** @type {?} */
    ScrollbarComponent.prototype.document;
}

//# sourceMappingURL=data:application/json;base64,