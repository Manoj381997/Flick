import { AfterViewInit, OnDestroy, EventEmitter, Renderer2, NgZone } from '@angular/core';
export declare class ScrollbarComponent implements AfterViewInit, OnDestroy {
    private zone;
    private renderer;
    private document;
    private _thumbSizeY;
    private _thumbSizeX;
    private _trackTopMax;
    private _trackLeftMax;
    private _scrollLeftMax;
    private _scrollTopMax;
    private _naturalThumbSizeY;
    private _naturalThumbSizeX;
    private _currXPos;
    private _currYPos;
    private _minThumbSize;
    private _scrollSub$;
    private _barXSub$;
    private _barYSub$;
    private _thumbXSub$;
    private _thumbYSub$;
    barX: HTMLElement;
    barY: HTMLElement;
    thumbX: HTMLElement;
    thumbY: HTMLElement;
    view: HTMLElement;
    barXRef: any;
    barYRef: any;
    thumbXRef: any;
    thumbYRef: any;
    viewRef: any;
    autoUpdate: boolean;
    autoHide: boolean;
    trackX: boolean;
    trackY: boolean;
    viewClass: string;
    barClass: string;
    thumbClass: string;
    scrollState: EventEmitter<any>;
    constructor(zone: NgZone, renderer: Renderer2, document: any);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * Scroll horizontally
     * @param to
     * @param duration
     */
    scrollXTo(to: number, duration?: number): void;
    /**
     * Scroll vertically
     * @param to
     * @param duration
     */
    scrollYTo(to: number, duration?: number): void;
    /**
     * Scroll view to top
     * @param duration
     */
    scrollToTop(duration?: number): void;
    /**
     * Scroll view to bottom
     * @param duration
     */
    scrollToBottom(duration?: number): void;
    /**
     * Scroll view to max right
     * @param duration
     */
    scrollToRight(duration?: number): void;
    /**
     * Scroll view to max left
     * @param duration
     */
    scrollToLeft(duration?: number): void;
    /**
     * Update thumbnails
     */
    update(): void;
    /**
     * Scroll Worker
     * @param e - Mouse Event
     */
    private scrollWorker(e);
    /**
     * Horizontal scrollbar click worker
     * @param e - Mouse Event
     */
    private barXWorker(e);
    /**
     * Vertical scrollbar click worker
     * @param e - Mouse Event
     */
    private barYWorker(e);
    /**
     * Start horizontal thumb worker
     */
    private startThumbXWorker();
    /**
     * Start vertical thumb worker
     */
    private startThumbYWorker();
    /**
     * Calculate Thumb X Size
     */
    private calculateThumbXSize();
    /**
     * Calculate Thumb Y Size
     */
    private calculateThumbYSize();
    /**
     * Get scrollbar thumb size
     * @param naturalThumbSize
     * @param scrollMax
     */
    private scrollBoundaries(naturalThumbSize, scrollMax);
    /**
     * Set horizontal scrollbar thumb style
     * @param x
     * @param width
     */
    private setThumbXPosition(x, width);
    /**
     * Set vertical scrollbar thumb style
     * @param y
     * @param height
     */
    private setThumbYPosition(y, height);
    /**
     * Hide native scrollbars
     */
    private hideNativeScrollbars();
    /**
     * Get the native scrollbar width
     */
    private getNativeScrollbarWidth();
}
