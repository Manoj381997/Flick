import TweenMax from 'gsap'

export default class VideoBox {

	constructor(opt = {}) {

		this.options = opt

		this.vars = {
			container: this.options.container || document.querySelector('.vb-container'),
			fade: this.options.fade || 0.25
		}

		this.open = Array.prototype.slice.call(document.querySelectorAll('.js-has-vb'), 0)

		this.tl = new TimelineMax({ paused: true, onReverseComplete: () => {
			this.destroy()
		} })

		this.tl.to(this.vars.container, this.vars.fade, { autoAlpha: 1 })

		this.inner = null
		this.close = null
		this.video = null

		this.init()
	}

	createContainer() {

		this.vars.container.classList.contains('vb-container') ? true : this.vars.container.classList.add('vb-container')

		this.inner = document.createElement('div')
		this.inner.classList.add('vb-container__inner')

		this.close = document.createElement('button')
		this.close.classList.add('vb-container__close')

		this.vars.container.appendChild(this.inner)
		this.vars.container.appendChild(this.close)
	}

	createVideo(el) {

		el.addEventListener('click', (ev) => {
			
			const el = ev.target
			const embed = el.getAttribute('data-embed-url')
			const frame = `<iframe src="${embed}?rel=0&autoplay=1" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>`

			this.video = document.createElement('div')
			this.video.classList.add('vb-container__video')
			this.video.innerHTML = frame

			this.inner.appendChild(this.video)

			this.tl.play()
		})
	}

	destroy() {

		this.inner.removeChild(this.video)
		this.video = null
	}

	init() {

		this.createContainer()
	
		this.open.forEach((el) => {
			this.createVideo(el)
		})

		this.close.addEventListener('click', () => {
			this.tl.reverse()
		})
	}

}