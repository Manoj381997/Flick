{"version":3,"sources":["ng://@ngx-progressbar/core/lib/ng-progress-ref.ts","ng://@ngx-progressbar/core/lib/ng-progress.token.ts","ng://@ngx-progressbar/core/lib/ng-progress.service.ts","ng://@ngx-progressbar/core/lib/ng-progress.component.ts","ng://@ngx-progressbar/core/lib/ng-progress.module.ts"],"names":["NgProgressRef","customConfig","_this","this","active","value","Subject","BehaviorSubject","_state","combineLatest","_trickling$","config$","pipe","debounce","_a","_b","tslib_1","__read","start","timer","_config","debounceTime","switchMap","config","_trickling","_complete","subscribe","setConfig","Object","defineProperty","prototype","state$","map","state","distinctUntilChanged","filter","skip","next","complete","inc","amount","n","isStarted","trickleFunc","set","_setState","_clamp","__assign","destroy","Math","max","min","trickleSpeed","tap","of","delay","speed","CONFIG","InjectionToken","defaultConfig","meteor","spinner","thick","ease","spinnerPosition","direction","color","NgProgress","ref","id","_instances","started","EMPTY","completed","destroyAll","keys","key","Injectable","Optional","type","Inject","args","NgProgressComponent","_ngProgress","EventEmitter","ngOnChanges","progressRef","ngOnInit","transform","observers","length","_started$","emit","_completed$","ngOnDestroy","unsubscribe","Component","selector","host","role","[attr.spinnerPosition]","[attr.dir]","[attr.thick]","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","preserveWhitespaces","Input","Output","NgProgressFactory","NgProgressModule","forRoot","ngModule","providers","provide","useValue","useFactory","deps","NgModule","declarations","exports","imports","CommonModule"],"mappings":"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","sourcesContent":["import { NgProgressState, NgProgressConfig } from './ng-progress.interface';\r\nimport { Observable, Subject, BehaviorSubject, timer, of, combineLatest } from 'rxjs';\r\nimport { tap, map, skip, delay, filter, debounce, switchMap, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nexport class NgProgressRef {\r\n\r\n  private _state: NgProgressState = {active: false, value: 0};\r\n  private _config: NgProgressConfig;\r\n\r\n  /** Stream that increments and updates progress state */\r\n  private _trickling$ = new Subject();\r\n\r\n  /** Stream that emits when progress state is changed */\r\n  state$ = new BehaviorSubject<NgProgressState>(this._state);\r\n\r\n  /** Stream that emits when config is changed */\r\n  config$ = new Subject<NgProgressConfig>();\r\n\r\n  get isStarted(): boolean {\r\n    return this._state.active;\r\n  }\r\n\r\n  /** Progress start event */\r\n  get started(): Observable<boolean> {\r\n    return this.state$.pipe(\r\n      map((state: NgProgressState) => state.active),\r\n      distinctUntilChanged(),\r\n      filter(active => active)\r\n    );\r\n  }\r\n\r\n  /** Progress ended event */\r\n  get completed(): Observable<boolean> {\r\n    return this.state$.pipe(\r\n      map((state: NgProgressState) => state.active),\r\n      distinctUntilChanged(),\r\n      filter(active => !active),\r\n      skip(1)\r\n    );\r\n  }\r\n\r\n  constructor(customConfig: NgProgressConfig) {\r\n\r\n    combineLatest(this._trickling$, this.config$).pipe(\r\n      debounce(([start, config]: [boolean, NgProgressConfig]) => timer(start ? this._config.debounceTime : 0)),\r\n      switchMap(([start, config]: [boolean, NgProgressConfig]) => start ? this._trickling(config) : this._complete(config))\r\n    ).subscribe();\r\n\r\n    this.setConfig(customConfig);\r\n  }\r\n\r\n  start() {\r\n    this._trickling$.next(true);\r\n  }\r\n\r\n  complete() {\r\n    this._trickling$.next(false);\r\n  }\r\n\r\n  inc(amount?: number) {\r\n    const n = this._state.value;\r\n    if (!this.isStarted) {\r\n      this.start();\r\n    } else {\r\n      if (typeof amount !== 'number') {\r\n        amount = this._config.trickleFunc(n);\r\n      }\r\n      this.set(n + amount);\r\n    }\r\n  }\r\n\r\n  set(n: number) {\r\n    this._setState({value: this._clamp(n), active: true});\r\n  }\r\n\r\n  setConfig(config: NgProgressConfig) {\r\n    this._config = {...this._config, ...config};\r\n    this.config$.next(this._config);\r\n  }\r\n\r\n  /**\r\n   * Meant to be used internally and not by user directly\r\n   * Users should use NgProgressManager.destroy(id) instead\r\n   */\r\n  destroy() {\r\n    this._trickling$.complete();\r\n    this.state$.complete();\r\n    this.config$.complete();\r\n  }\r\n\r\n  private _setState(state: NgProgressState) {\r\n    this._state = {...this._state, ...state};\r\n    this.state$.next(this._state);\r\n  }\r\n\r\n  /** Clamps a value to be between min and max */\r\n  private _clamp(n): number {\r\n    return Math.max(this._config.min, Math.min(this._config.max, n));\r\n  }\r\n\r\n  /** Keeps incrementing the progress */\r\n  private _trickling(config: NgProgressConfig) {\r\n    if (!this.isStarted) {\r\n      this.set(this._config.min);\r\n    }\r\n    return timer(0, config.trickleSpeed).pipe(tap(() => this.inc()));\r\n  }\r\n\r\n  /** Completes then resets the progress */\r\n  private _complete(config: NgProgressConfig) {\r\n    return !this.isStarted ? of({}) : of({}).pipe(\r\n      // Completes the progress\r\n      tap(() => this._setState({value: 100})),\r\n\r\n      // Hides the progress bar after a tiny delay\r\n      delay(config.speed * 1.7),\r\n      tap(() => this._setState({active: false})),\r\n\r\n      // Resets the progress state\r\n      delay(config.speed),\r\n      tap(() => this._setState({value: 0}))\r\n    );\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { NgProgressConfig } from './ng-progress.interface';\r\n\r\nexport const CONFIG = new InjectionToken<NgProgressConfig>('config');\r\n","import { Injectable, Inject, Optional } from '@angular/core';\r\nimport { NgProgressRef } from './ng-progress-ref';\r\nimport { NgProgressConfig } from './ng-progress.interface';\r\nimport { EMPTY } from 'rxjs';\r\nimport { CONFIG } from './ng-progress.token';\r\n\r\nconst defaultConfig: NgProgressConfig = {\r\n  meteor: true,\r\n  spinner: true,\r\n  thick: false,\r\n  ease: 'linear',\r\n  spinnerPosition: 'right',\r\n  direction: 'ltr+',\r\n  color: '#1B95E0',\r\n  max: 100,\r\n  min: 8,\r\n  speed: 200,\r\n  trickleSpeed: 300,\r\n  debounceTime: 0,\r\n  trickleFunc: (n: number): number => {\r\n    if (n >= 0 && n < 20) return 10;\r\n    if (n >= 20 && n < 50) return 4;\r\n    if (n >= 50 && n < 80) return 2;\r\n    if (n >= 80 && n < 99) return 0.5;\r\n    return 0;\r\n  }\r\n};\r\n\r\n@Injectable()\r\nexport class NgProgress {\r\n\r\n  /** Stores NgProgressRef instances */\r\n  private readonly _instances = {};\r\n\r\n  /** Global config */\r\n  config: NgProgressConfig;\r\n\r\n  constructor(@Optional() @Inject(CONFIG) config: NgProgressConfig) {\r\n    this.config = {...defaultConfig, ...config};\r\n  }\r\n\r\n  /**\r\n   * Returns NgProgressRef by ID\r\n   */\r\n  ref(id = 'root', config?: NgProgressConfig) {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      return this._instances[id];\r\n    } else {\r\n      config = {...this.config, ...config};\r\n      return this._instances[id] = new NgProgressRef(config);\r\n    }\r\n  }\r\n\r\n  setConfig(config: NgProgressConfig, id = 'root') {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      this._instances[id].setConfig(config);\r\n    }\r\n  }\r\n\r\n  start(id = 'root') {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      this._instances[id].start();\r\n    }\r\n  }\r\n\r\n  set(n: number, id = 'root') {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      this._instances[id].set(n);\r\n    }\r\n  }\r\n\r\n  inc(n?: number, id = 'root') {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      this._instances[id].inc(n);\r\n    }\r\n  }\r\n\r\n  complete(id = 'root') {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      this._instances[id].complete();\r\n    }\r\n  }\r\n\r\n  isStarted(id = 'root') {\r\n    return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].isStarted : false;\r\n  }\r\n\r\n  started(id = 'root') {\r\n    return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].started : EMPTY;\r\n  }\r\n\r\n  completed(id = 'root') {\r\n    return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].completed : EMPTY;\r\n  }\r\n\r\n  destroy(id = 'root') {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      this._instances[id].destroy();\r\n      this._instances[id] = null;\r\n    }\r\n  }\r\n\r\n  destroyAll() {\r\n    Object.keys(this._instances).map((key) => {\r\n      this._instances[key].destroy();\r\n      this._instances[key] = null;\r\n    });\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright ngx-progressbar All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/MurhafSousli/ngx-progressbar/blob/master/LICENSE\r\n */\r\n\r\nimport {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ChangeDetectionStrategy,\r\n  EventEmitter,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { NgProgress } from './ng-progress.service';\r\nimport { NgProgressRef } from './ng-progress-ref';\r\nimport { NgProgressState } from './ng-progress.interface';\r\nimport { Observable, Subscription} from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'ng-progress',\r\n  host: {\r\n    'role': 'progressbar',\r\n    '[attr.spinnerPosition]': 'spinnerPosition',\r\n    '[attr.dir]': 'direction',\r\n    '[attr.thick]': 'thick'\r\n  },\r\n  template: `\r\n    <ng-container *ngIf=\"state$ | async; let state\">\r\n      <div class=\"ng-progress-bar\"\r\n            [class.-active]=\"state.active\"\r\n            [style.transition]=\"'opacity ' + speed + 'ms ' + ease\">\r\n        <div class=\"ng-bar-placeholder\">\r\n          <div class=\"ng-bar\"\r\n                [style.transform]=\"state.transform\"\r\n                [style.backgroundColor]=\"color\"\r\n                [style.transition]=\"state.active ? 'all ' + speed + 'ms ' + ease : 'none'\">\r\n            <div *ngIf=\"meteor\" class=\"ng-meteor\" [style.boxShadow]=\"'0 0 10px '+ color + ', 0 0 5px ' + color\"></div>\r\n          </div>\r\n        </div>\r\n        <div *ngIf=\"spinner\" class=\"ng-spinner\">\r\n          <div class=\"ng-spinner-icon\"\r\n                [style.borderTopColor]=\"color\"\r\n                [style.borderLeftColor]=\"color\"></div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  `,\r\n  styles: [`ng-progress{z-index:999999;pointer-events:none;position:relative}.ng-progress-bar{z-index:999999;top:0;left:0;width:100%;position:fixed;zoom:1;opacity:0}.ng-progress-bar.-active{opacity:1;transition:none}.ng-bar-placeholder{position:absolute;height:2px;width:100%}.ng-bar{width:100%;height:100%;-webkit-transform:translate(-100%,0,0);transform:translate(-100%,0,0)}.ng-meteor{display:block;position:absolute;width:100px;height:100%;opacity:1}.ng-spinner{display:block;position:fixed;z-index:1031;top:15px}.ng-spinner-icon{width:18px;height:18px;box-sizing:border-box;-webkit-animation:.4s linear infinite spinner-animation;animation:.4s linear infinite spinner-animation;border:2px solid transparent;border-radius:50%}[dir='ltr+'] .ng-meteor,[dir=ltr-] .ng-meteor{-webkit-transform:rotate(3deg);transform:rotate(3deg)}[dir='ltr+'][thick=true] .ng-meteor,[dir=ltr-][thick=true] .ng-meteor{-webkit-transform:rotate(4deg);transform:rotate(4deg)}[dir='ltr+'] .ng-bar,[dir='rtl+'] .ng-bar{margin-left:-100%}[dir='ltr+'] .ng-meteor,[dir='rtl+'] .ng-meteor{right:0}[dir='ltr+'] .ng-meteor,[dir=rtl-] .ng-meteor{top:-3px}[dir='ltr+'][thick=true] .ng-meteor,[dir=rtl-][thick=true] .ng-meteor{top:-4px}[dir='rtl+'] .ng-meteor,[dir=ltr-] .ng-meteor{bottom:-3px}[dir='rtl+'][thick=true] .ng-meteor,[dir=ltr-][thick=true] .ng-meteor{bottom:-4px}[dir='rtl+'] .ng-bar-placeholder,[dir=ltr-] .ng-bar-placeholder{-webkit-transform:rotate(180deg);transform:rotate(180deg)}[dir='rtl+'] .ng-spinner-icon,[dir=ltr-] .ng-spinner-icon{animation-direction:reverse}[dir='rtl+'] .ng-meteor,[dir=rtl-] .ng-meteor{-webkit-transform:rotate(-3deg);transform:rotate(-3deg)}[dir='rtl+'][thick=true] .ng-meteor,[dir=rtl-][thick=true] .ng-meteor{-webkit-transform:rotate(-4deg);transform:rotate(-4deg)}[thick=true] .ng-spinner-icon{width:24px;height:24px;border-width:3px}[thick=true] .ng-bar-placeholder{height:3px}[spinnerPosition=left] .ng-spinner{left:15px;right:unset}[spinnerPosition=right] .ng-spinner{right:15px}@-webkit-keyframes spinner-animation{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes spinner-animation{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}`],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false\r\n})\r\n\r\nexport class NgProgressComponent implements OnInit, OnChanges, OnDestroy {\r\n\r\n  private _started$: Subscription;\r\n  private _completed$: Subscription;\r\n\r\n  /** Progress bar worker */\r\n  progressRef: NgProgressRef;\r\n\r\n  /** Progress state stream */\r\n  state$: Observable<{ active: boolean, transform: string }>;\r\n\r\n  /** Creates a new instance if id is not already exists */\r\n  @Input() id = 'root';\r\n\r\n  /** Initializes inputs from the global config */\r\n  @Input() spinnerPosition: 'left' | 'right' = this._ngProgress.config.spinnerPosition;\r\n  @Input() direction: 'ltr+' | 'ltr-' | 'rtl+' | 'rtl-' = this._ngProgress.config.direction;\r\n  @Input() ease: string = this._ngProgress.config.ease;\r\n  @Input() color: string = this._ngProgress.config.color;\r\n  @Input() meteor: boolean = this._ngProgress.config.meteor;\r\n  @Input() spinner: boolean = this._ngProgress.config.spinner;\r\n  @Input() thick: boolean = this._ngProgress.config.thick;\r\n  @Input() max: number = this._ngProgress.config.max;\r\n  @Input() min: number = this._ngProgress.config.min;\r\n  @Input() speed: number = this._ngProgress.config.speed;\r\n  @Input() trickleSpeed: number = this._ngProgress.config.trickleSpeed;\r\n  @Input() trickleFunc: (n: number) => number = this._ngProgress.config.trickleFunc;\r\n  @Input() debounceTime: number = this._ngProgress.config.debounceTime;\r\n  @Output() started = new EventEmitter();\r\n  @Output() completed = new EventEmitter();\r\n\r\n  constructor(private _ngProgress: NgProgress) {\r\n  }\r\n\r\n  ngOnChanges() {\r\n    if (this.progressRef instanceof NgProgressRef) {\r\n      // Update progress bar config when inputs change\r\n      this.progressRef.setConfig({\r\n        max: (this.max > 0 && this.max <= 100) ? this.max : 100,\r\n        min: (this.min < 100 && this.min >= 0) ? this.min : 0,\r\n        speed: this.speed,\r\n        trickleSpeed: this.trickleSpeed,\r\n        trickleFunc: this.trickleFunc,\r\n        debounceTime: this.debounceTime\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Get progress bar service instance\r\n    this.progressRef = this._ngProgress.ref(this.id, {\r\n      max: this.max,\r\n      min: this.min,\r\n      speed: this.speed,\r\n      trickleSpeed: this.trickleSpeed,\r\n      debounceTime: this.debounceTime\r\n    });\r\n    this.state$ = this.progressRef.state$.pipe(map((state: NgProgressState) => ({\r\n      active: state.active,\r\n      transform: `translate3d(${state.value}%,0,0)`\r\n    })));\r\n    /** Subscribes to started and completed events when user used them */\r\n    if (this.started.observers.length) {\r\n      this._started$ = this.progressRef.started.subscribe(() => this.started.emit());\r\n    }\r\n    if (this.completed.observers.length) {\r\n      this._completed$ = this.progressRef.completed.subscribe(() => this.completed.emit());\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._started$) {\r\n      this._started$.unsubscribe();\r\n    }\r\n    if (this._completed$) {\r\n      this._completed$.unsubscribe();\r\n    }\r\n    this._ngProgress.destroy(this.id);\r\n  }\r\n\r\n  start() {\r\n    this.progressRef.start();\r\n  }\r\n\r\n  complete() {\r\n    this.progressRef.complete();\r\n  }\r\n\r\n  inc(n?: number) {\r\n    this.progressRef.inc(n);\r\n  }\r\n\r\n  set(n: number) {\r\n    this.progressRef.set(n);\r\n  }\r\n\r\n  get isStarted() {\r\n    return this.progressRef.isStarted;\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgProgressComponent } from './ng-progress.component';\r\nimport { NgProgress } from './ng-progress.service';\r\nimport { NgProgressConfig } from './ng-progress.interface';\r\nimport { CONFIG } from './ng-progress.token';\r\n\r\nexport function NgProgressFactory(config: NgProgressConfig) {\r\n  return new NgProgress(config);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [NgProgressComponent],\r\n  exports: [NgProgressComponent],\r\n  imports: [CommonModule]\r\n})\r\nexport class NgProgressModule {\r\n  static forRoot(config?: NgProgressConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgProgressModule,\r\n      providers: [\r\n        {provide: CONFIG, useValue: config},\r\n        {\r\n          provide: NgProgress,\r\n          useFactory: NgProgressFactory,\r\n          deps: [CONFIG]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}